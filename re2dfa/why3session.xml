<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="re2dfa.mlw"/>
<theory name="RegEx" proved="true">
 <goal name="regex_wf&#39;vc" expl="VC for regex_wf" proved="true">
 <proof prover="0"><result status="valid" time="0.08"/></proof>
 </goal>
</theory>
<theory name="RevListProp" proved="true">
 <goal name="hd_tl_reverse" proved="true">
 <proof prover="0"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="hd_tl_reverse2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hd_tl_reverse2.0" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="37997701"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="hd_tl_reverse3" proved="true">
 <proof prover="0"><result status="valid" time="0.13"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="10716162"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="hd_tl_reverse4" proved="true">
 <proof prover="0"><result status="valid" time="0.06"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="1519997"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="NFA">
 <goal name="automaton&#39;vc" expl="VC for automaton" proved="true">
 <proof prover="0"><result status="valid" time="0.52"/></proof>
 </goal>
 <goal name="delta_get_1st&#39;vc" expl="VC for delta_get_1st" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.83"/></proof>
 </goal>
 <goal name="delta_get_2nd&#39;vc" expl="VC for delta_get_2nd" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="1.21"/></proof>
 </goal>
 <goal name="delta_get_3rd&#39;vc" expl="VC for delta_get_3rd" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="1.36"/></proof>
 </goal>
 <goal name="filter_trans&#39;vc" expl="VC for filter_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="filter_trans&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="filter_trans&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="filter_trans&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="filter_trans&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="filter_trans&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="filter_trans&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="filter_trans&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="filter_trans&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="filter_trans&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.20"/></proof>
    </goal>
    <goal name="filter_trans&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
    <goal name="filter_trans&#39;vc.3.0.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.17"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="filter_trans&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="filter_trans&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.24"/></proof>
    </goal>
    <goal name="filter_trans&#39;vc.3.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.40"/></proof>
    </goal>
    <goal name="filter_trans&#39;vc.3.1.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.18"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="filter_trans&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="filter_trans&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.13" steps="247"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="delta&#39;vc" expl="VC for delta" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="4.70"/></proof>
 </goal>
 <goal name="fold_next_states&#39;vc" expl="VC for fold_next_states" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fold_next_states&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.52"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="fold_next_states&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.37"/></proof>
   </goal>
   <goal name="fold_next_states&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.28"/></proof>
   </goal>
   <goal name="fold_next_states&#39;vc.5.2" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.81" steps="1893"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fold_next_states&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="353"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="fold_next_states&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.27"/></proof>
   </goal>
   <goal name="fold_next_states&#39;vc.7.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.17"/></proof>
   </goal>
   <goal name="fold_next_states&#39;vc.7.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.52"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="eclose&#39;vc" expl="VC for eclose" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="highfailure" time="3.57" steps="3696659"/></proof>
 <proof prover="2"><result status="valid" time="1.64" steps="7789"/></proof>
 </goal>
 <goal name="fold_delta&#39;vc" expl="VC for fold_delta" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fold_delta&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="fold_delta&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.37"/></proof>
   </goal>
   <goal name="fold_delta&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.86" steps="2011"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fold_delta&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_eclose_path">
 </goal>
 <goal name="lemma_path_eclose">
 <transf name="split_vc" >
  <goal name="lemma_path_eclose.0">
  <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="33614296"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_concat_path">
 <transf name="split_vc" >
  <goal name="lemma_concat_path.0">
  <transf name="unfold" arg1="path" arg2="in" arg3="H1">
   <goal name="lemma_concat_path.0.0">
   <transf name="destruct" arg1="H1">
    <goal name="lemma_concat_path.0.0.0" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.13"/></proof>
    </goal>
    <goal name="lemma_concat_path.0.0.1">
    <transf name="destruct" arg1="H1">
     <goal name="lemma_concat_path.0.0.1.0">
     <transf name="destruct" arg1="H1">
      <goal name="lemma_concat_path.0.0.1.0.0" proved="true">
      <proof prover="0"><result status="valid" time="0.25"/></proof>
      </goal>
      <goal name="lemma_concat_path.0.0.1.0.1">
      <transf name="unfold" arg1="path" arg2="in" arg3="H">
       <goal name="lemma_concat_path.0.0.1.0.1.0">
       <transf name="destruct" arg1="H">
        <goal name="lemma_concat_path.0.0.1.0.1.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.17"/></proof>
        </goal>
        <goal name="lemma_concat_path.0.0.1.0.1.0.1">
        <transf name="destruct" arg1="H">
         <goal name="lemma_concat_path.0.0.1.0.1.0.1.0">
         <proof prover="0" timelimit="5"><result status="timeout" time="5.00"/></proof>
         <proof prover="1" timelimit="5"><result status="highfailure" time="4.17" steps="4836693"/></proof>
         <proof prover="2" timelimit="5"><result status="timeout" time="5.00"/></proof>
         </goal>
         <goal name="lemma_concat_path.0.0.1.0.1.0.1.1">
         <proof prover="0" timelimit="5"><result status="timeout" time="5.00"/></proof>
         <proof prover="1" timelimit="5"><result status="highfailure" time="4.30" steps="4843383"/></proof>
         <proof prover="2" timelimit="5"><result status="timeout" time="5.00"/></proof>
         </goal>
         <goal name="lemma_concat_path.0.0.1.0.1.0.1.2">
         <proof prover="0" timelimit="5"><result status="timeout" time="5.00"/></proof>
         <proof prover="1" timelimit="5"><result status="highfailure" time="3.50" steps="6376916"/></proof>
         <proof prover="2" timelimit="5"><result status="timeout" time="5.00"/></proof>
         <transf name="destruct" arg1="H">
          <goal name="lemma_concat_path.0.0.1.0.1.0.1.2.0">
          <proof prover="0"><result status="timeout" time="1.00"/></proof>
          <transf name="destruct" arg1="H">
           <goal name="lemma_concat_path.0.0.1.0.1.0.1.2.0.0">
           <transf name="destruct" arg1="H">
            <goal name="lemma_concat_path.0.0.1.0.1.0.1.2.0.0.0">
            <transf name="destruct" arg1="H">
             <goal name="lemma_concat_path.0.0.1.0.1.0.1.2.0.0.0.0">
             <transf name="assert" arg1="(mem1 f (eclose (add s (empty: fset int)) a))">
              <goal name="lemma_concat_path.0.0.1.0.1.0.1.2.0.0.0.0.0" expl="asserted formula">
              <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
              <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="23248377"/></proof>
              <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
              </goal>
              <goal name="lemma_concat_path.0.0.1.0.1.0.1.2.0.0.0.0.1">
              <proof prover="0" timelimit="5"><result status="timeout" time="5.00"/></proof>
              <proof prover="1" timelimit="5"><result status="timeout" time="5.00" steps="9006105"/></proof>
              <proof prover="2" timelimit="5"><result status="timeout" time="5.00"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="lemma_concat_path.0.0.1.1">
     <proof prover="0"><result status="timeout" time="1.00"/></proof>
     <proof prover="1"><result status="timeout" time="1.00" steps="1591826"/></proof>
     <proof prover="2"><result status="timeout" time="1.00"/></proof>
     </goal>
     <goal name="lemma_concat_path.0.0.1.2">
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  <transf name="unfold" arg1="path" arg2="in" arg3="lemma_concat_path">
   <goal name="lemma_concat_path.0.0">
   <transf name="split_vc" >
    <goal name="lemma_concat_path.0.0.0">
    </goal>
    <goal name="lemma_concat_path.0.0.1">
    </goal>
    <goal name="lemma_concat_path.0.0.2">
    </goal>
    <goal name="lemma_concat_path.0.0.3">
    </goal>
    <goal name="lemma_concat_path.0.0.4">
    </goal>
    <goal name="lemma_concat_path.0.0.5">
    </goal>
    <goal name="lemma_concat_path.0.0.6">
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_subset_eclose" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_subset_eclose.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="lemma_subset_eclose.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="lemma_subset_eclose.0.0.0" proved="true">
    <transf name="instantiate" proved="true" arg1="lemma_eclose_path" arg2="s">
     <goal name="lemma_subset_eclose.0.0.0.0" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="q">
      <goal name="lemma_subset_eclose.0.0.0.0.0" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="a">
       <goal name="lemma_subset_eclose.0.0.0.0.0.0" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="lemma_subset_eclose.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.11"/></proof>
        </goal>
        <goal name="lemma_subset_eclose.0.0.0.0.0.0.1" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0" proved="true">
          <transf name="instantiate" proved="true" arg1="lemma_eclose_path" arg2="(singleton q)">
           <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0" proved="true">
           <transf name="instantiate" proved="true" arg1="Hinst" arg2="x">
            <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0" proved="true">
            <transf name="instantiate" proved="true" arg1="Hinst" arg2="a">
             <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0" proved="true">
             <transf name="destruct" proved="true" arg1="Hinst">
              <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
              <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
              <proof prover="2"><result status="valid" time="0.24" steps="444"/></proof>
              </goal>
              <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0.1" proved="true">
              <transf name="destruct" proved="true" arg1="Hinst">
               <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0.1.0" proved="true">
               <transf name="destruct" proved="true" arg1="Hinst">
                <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0" proved="true">
                <transf name="assert" proved="true" arg1="(path q w x a)">
                 <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="0.29"/></proof>
                 </goal>
                 <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.1" proved="true">
                 <transf name="assert" proved="true" arg1="(path i1 (w1++w) x a)">
                  <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
                  <proof prover="0" timelimit="5"><result status="valid" time="2.81"/></proof>
                  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="1454607"/></proof>
                  <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
                  </goal>
                  <goal name="lemma_subset_eclose.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.1.1" proved="true">
                  <proof prover="0"><result status="valid" time="1.00"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="delta_ext&#39;vc" expl="VC for delta_ext" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="delta_ext&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.8" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="1963464"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.15"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.14.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.14.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="delta_ext&#39;vc.15" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.15.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.15.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H">
    <goal name="delta_ext&#39;vc.15.1.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="delta_ext&#39;vc.15.1.0.0" expl="destruct premise" proved="true">
     <proof prover="0"><result status="valid" time="0.15"/></proof>
     </goal>
     <goal name="delta_ext&#39;vc.15.1.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="delta_ext&#39;vc.15.1.0.1.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.37"/></proof>
      <proof prover="2" timelimit="5"><result status="valid" time="0.06" steps="26"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.15.1.0.1.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="delta_ext&#39;vc.15.1.0.1.1.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="H">
        <goal name="delta_ext&#39;vc.15.1.0.1.1.0.0" expl="postcondition" proved="true">
        <transf name="destruct" proved="true" arg1="H">
         <goal name="delta_ext&#39;vc.15.1.0.1.1.0.0.0" expl="postcondition" proved="true">
         <proof prover="0"><result status="valid" time="0.60"/></proof>
         </goal>
         <goal name="delta_ext&#39;vc.15.1.0.1.1.0.0.1" expl="postcondition" proved="true">
         <proof prover="2" timelimit="5"><result status="valid" time="0.15" steps="26"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="delta_ext&#39;vc.15.1.0.1.1.0.1" expl="postcondition" proved="true">
        <proof prover="0"><result status="valid" time="0.37"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="delta_ext&#39;vc.15.1.0.1.2" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.51"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="delta_ext&#39;vc.15.2" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H">
    <goal name="delta_ext&#39;vc.15.2.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="delta_ext&#39;vc.15.2.0.0" expl="destruct premise" proved="true">
     <proof prover="0"><result status="valid" time="0.17"/></proof>
     </goal>
     <goal name="delta_ext&#39;vc.15.2.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="delta_ext&#39;vc.15.2.0.1.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.41"/></proof>
      <proof prover="2" timelimit="5"><result status="valid" time="0.06" steps="32"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.15.2.0.1.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="delta_ext&#39;vc.15.2.0.1.1.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="H">
        <goal name="delta_ext&#39;vc.15.2.0.1.1.0.0" expl="postcondition" proved="true">
        <transf name="destruct" proved="true" arg1="H">
         <goal name="delta_ext&#39;vc.15.2.0.1.1.0.0.0" expl="postcondition" proved="true">
         <proof prover="0"><result status="valid" time="0.52"/></proof>
         </goal>
         <goal name="delta_ext&#39;vc.15.2.0.1.1.0.0.1" expl="postcondition" proved="true">
         <proof prover="0" timelimit="5"><result status="valid" time="0.41"/></proof>
         <proof prover="1"><result status="valid" time="0.12" steps="214698"/></proof>
         <proof prover="2" timelimit="5"><result status="valid" time="0.11" steps="248"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1" expl="postcondition" proved="true">
        <transf name="destruct" proved="true" arg1="H">
         <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.0" expl="postcondition" proved="true">
         <proof prover="2" timelimit="5"><result status="valid" time="1.61" steps="3178"/></proof>
         </goal>
         <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1" expl="postcondition" proved="true">
         <proof prover="2" timelimit="5"><result status="timeout" time="5.00"/></proof>
         <transf name="destruct" proved="true" arg1="H">
          <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.0" expl="postcondition" proved="true">
          <transf name="destruct" proved="true" arg1="H">
           <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.0.0" expl="postcondition" proved="true">
           <proof prover="2" timelimit="5"><result status="valid" time="1.96" steps="3589"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.1" expl="postcondition" proved="true">
          <transf name="destruct" proved="true" arg1="H">
           <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.1.0" expl="postcondition" proved="true">
           <transf name="destruct" proved="true" arg1="H">
            <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.1.0.0" expl="postcondition" proved="true">
            <transf name="eliminate_let_fmla" proved="true" >
             <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.1.0.0.0" expl="postcondition" proved="true">
             <transf name="instantiate" proved="true" arg1="H11" arg2="q">
              <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.1.0.0.0.0" expl="postcondition" proved="true">
              <transf name="instantiate" proved="true" arg1="Hinst" arg2="r">
               <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.1.0.0.0.0.0" expl="postcondition" proved="true">
               <transf name="destruct" proved="true" arg1="Hinst">
                <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0" timelimit="5"><result status="valid" time="1.03"/></proof>
                </goal>
                <goal name="delta_ext&#39;vc.15.2.0.1.1.0.1.1.1.0.0.0.0.0.1" expl="postcondition" proved="true">
                <proof prover="1" timelimit="5"><result status="valid" time="2.47" steps="3313504"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="delta_ext&#39;vc.15.2.0.1.2" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.56"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="delta_ext&#39;vc.15.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.48"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="trans_from_start" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="trans_from_start.0" proved="true">
  <transf name="unfold" proved="true" arg1="productive" arg2="in" arg3="H2">
   <goal name="trans_from_start.0.0" proved="true">
   <transf name="destruct" proved="true" arg1="H2">
    <goal name="trans_from_start.0.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="H2">
     <goal name="trans_from_start.0.0.0.0" proved="true">
     <transf name="destruct" proved="true" arg1="H2">
      <goal name="trans_from_start.0.0.0.0.0" proved="true">
      <transf name="destruct_term" proved="true" arg1="w">
       <goal name="trans_from_start.0.0.0.0.0.0" proved="true">
       <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H2">
        <goal name="trans_from_start.0.0.0.0.0.0.0" proved="true">
        <transf name="destruct" proved="true" arg1="H2">
         <goal name="trans_from_start.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
         <proof prover="0"><result status="valid" time="0.36"/></proof>
         </goal>
         <goal name="trans_from_start.0.0.0.0.0.0.0.1" proved="true">
         <transf name="destruct" proved="true" arg1="H2">
          <goal name="trans_from_start.0.0.0.0.0.0.0.1.0" proved="true">
          <proof prover="2" timelimit="5"><result status="valid" time="0.04" steps="15"/></proof>
          </goal>
          <goal name="trans_from_start.0.0.0.0.0.0.0.1.1" proved="true">
          <proof prover="2" timelimit="5"><result status="valid" time="3.75" steps="7230"/></proof>
          </goal>
          <goal name="trans_from_start.0.0.0.0.0.0.0.1.2" proved="true">
          <transf name="destruct" proved="true" arg1="H2">
           <goal name="trans_from_start.0.0.0.0.0.0.0.1.2.0" proved="true">
           <proof prover="2" timelimit="5"><result status="valid" time="2.56" steps="6225"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="trans_from_start.0.0.0.0.0.1" proved="true">
       <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H2">
        <goal name="trans_from_start.0.0.0.0.0.1.0" proved="true">
        <transf name="destruct" proved="true" arg1="H2">
         <goal name="trans_from_start.0.0.0.0.0.1.0.0" expl="destruct premise" proved="true">
         <proof prover="0"><result status="valid" time="0.30"/></proof>
         </goal>
         <goal name="trans_from_start.0.0.0.0.0.1.0.1" proved="true">
         <transf name="destruct" proved="true" arg1="H2">
          <goal name="trans_from_start.0.0.0.0.0.1.0.1.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="trans_from_start.0.0.0.0.0.1.0.1.0.0" proved="true">
           <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.77" steps="2434"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="trans_from_start.0.0.0.0.0.1.0.1.1" proved="true">
          <transf name="destruct" proved="true" arg1="H2">
           <goal name="trans_from_start.0.0.0.0.0.1.0.1.1.0" proved="true">
           <proof prover="2"><result status="valid" time="0.04" steps="18"/></proof>
           </goal>
           <goal name="trans_from_start.0.0.0.0.0.0.0.1.0.1">
           <proof prover="0" timelimit="5"><result status="timeout" time="5.00"/></proof>
           <proof prover="2" timelimit="5"><result status="valid" time="0.03" steps="16"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="trans_from_start.0.0.0.0.0.1.0.1.2" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="trans_from_start.0.0.0.0.0.1.0.1.2.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="trans_from_start.0.0.0.0.0.1.0.1.2.0.0" proved="true">
            <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.05" steps="21"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sigma_ext&#39;vc" expl="VC for sigma_ext" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="2.00"/></proof>
 <proof prover="2"><result status="valid" time="0.09" steps="365"/></proof>
 </goal>
 <goal name="automatonLangConstr&#39;vc" expl="VC for automatonLangConstr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="automatonLangConstr&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="automatonLangConstr&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="automatonLangConstr&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="automatonLangConstr&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.24"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.37"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.3.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.60"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.3.1.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.38"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.3.1.3" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.32"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.52"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.4.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.50"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.4.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.4.1.2" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.4.1.2.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.17"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.4.1.2.1" expl="postcondition" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="automatonLangConstr&#39;vc.4.1.3" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.5.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.11.1.2" expl="postcondition">
    <proof prover="0"><result status="timeout" time="1.00"/></proof>
    <proof prover="2"><result status="valid" time="0.53" steps="1837"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.11.1.1" expl="postcondition">
    <proof prover="2" timelimit="5"><result status="valid" time="3.29" steps="10803"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.11.1.3" expl="postcondition">
    <proof prover="0"><result status="valid" time="0.36"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="automatonLangConstr&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.36"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.6.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.23"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.6.1.1.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.37"/></proof>
     <proof prover="2" timelimit="5"><result status="valid" time="0.14" steps="462"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.6.1.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="automatonLangConstr&#39;vc.6.1.1.1.0" expl="postcondition" proved="true">
      <proof prover="2" timelimit="5"><result status="valid" time="0.67" steps="2767"/></proof>
      </goal>
      <goal name="automatonLangConstr&#39;vc.6.1.1.1.1" expl="postcondition" proved="true">
      <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="5.20" steps="10708"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.6.1.1.2" expl="postcondition" proved="true">
     <proof prover="2" timelimit="5"><result status="valid" time="0.49" steps="1817"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.6.1.1.3" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.05" steps="26"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="automatonLangConstr&#39;vc.6.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.6.2.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.25"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.2.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.6.2.1.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.40"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.6.2.1.1" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.6.2.1.2" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.41"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.6.2.1.3" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.35"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="automatonLangConstr&#39;vc.6.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.7.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.7.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.38"/></proof>
     <proof prover="2" timelimit="5"><result status="valid" time="0.05" steps="24"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.0.1.3" expl="postcondition">
     <transf name="split_vc" >
      <goal name="automatonLangConstr&#39;vc.7.0.1.3.0" expl="postcondition">
      <proof prover="0" timelimit="5"><result status="valid" time="0.29"/></proof>
      </goal>
      <goal name="automatonLangConstr&#39;vc.7.0.1.3.1" expl="postcondition">
      <proof prover="0" timelimit="5"><result status="valid" time="0.32"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.0.1.1" expl="postcondition">
     <transf name="split_vc" >
      <goal name="automatonLangConstr&#39;vc.7.0.1.1.0" expl="postcondition">
      <proof prover="0" timelimit="5"><result status="valid" time="1.34"/></proof>
      </goal>
      <goal name="automatonLangConstr&#39;vc.7.0.1.1.1" expl="postcondition">
      <proof prover="0" timelimit="5"><result status="valid" time="1.82"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.0.1.2" expl="postcondition">
     <transf name="split_vc" >
      <goal name="automatonLangConstr&#39;vc.7.0.1.2.0" expl="postcondition">
      <proof prover="0" timelimit="5"><result status="valid" time="1.44"/></proof>
      </goal>
      <goal name="automatonLangConstr&#39;vc.7.0.1.2.1" expl="postcondition">
      <proof prover="0" timelimit="5"><result status="valid" time="0.31"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="automatonLangConstr&#39;vc.7.0.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.7.0.1.0" expl="postcondition" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.39"/></proof>
     <proof prover="2" timelimit="5"><result status="valid" time="0.18" steps="632"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.0.1.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="automatonLangConstr&#39;vc.7.0.1.1.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="1.35"/></proof>
      </goal>
      <goal name="automatonLangConstr&#39;vc.7.0.1.1.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="1.81"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.0.1.2" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="automatonLangConstr&#39;vc.7.0.1.2.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="1.64"/></proof>
      </goal>
      <goal name="automatonLangConstr&#39;vc.7.0.1.2.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="0.35"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.0.1.3" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="automatonLangConstr&#39;vc.7.0.1.3.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="0.33"/></proof>
      </goal>
      <goal name="automatonLangConstr&#39;vc.7.0.1.3.1" expl="postcondition" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="0.31"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="automatonLangConstr&#39;vc.7.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.7.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.7.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.7.1.1.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.47"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.1.1.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.70" steps="2393"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.1.1.2" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.85"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.7.1.1.3" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.44"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.8.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.47"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.8.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.33"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.8.1.1" expl="postcondition" proved="true">
    <proof prover="2" timelimit="5"><result status="valid" time="0.08" steps="212"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.8.1.2" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.49"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.8.1.3" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.32"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.9.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.9.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.26"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.9.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.9.1.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.9.1.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.05" steps="28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.10.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.10.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.56"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.10.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.10.1.1.0" expl="postcondition" proved="true">
     <transf name="destruct_term" proved="true" arg1="w">
      <goal name="automatonLangConstr&#39;vc.10.1.1.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="sigma_ext&#39;spec" arg2="(to_fset3 (alphabet a))">
       <goal name="automatonLangConstr&#39;vc.10.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="automatonLangConstr&#39;vc.10.1.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
         <goal name="automatonLangConstr&#39;vc.10.1.1.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="automatonLangConstr&#39;vc.10.1.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.20"/></proof>
          </goal>
          <goal name="automatonLangConstr&#39;vc.10.1.1.0.0.0.0.0.1" expl="postcondition" proved="true">
          <transf name="instantiate" proved="true" arg1="Hinst" arg2="x1">
           <goal name="automatonLangConstr&#39;vc.10.1.1.0.0.0.0.0.1.0" expl="postcondition" proved="true">
           <proof prover="2"><result status="valid" time="0.70" steps="1782"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="automatonLangConstr&#39;vc.10.1.1.0.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.19"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.10.1.1.1" expl="postcondition" proved="true">
     <transf name="destruct_term" proved="true" arg1="w">
      <goal name="automatonLangConstr&#39;vc.10.1.1.1.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="sigma_ext&#39;spec" arg2="(to_fset3 (alphabet a))">
       <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
         <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0" expl="postcondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.20"/></proof>
          </goal>
          <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1" expl="postcondition" proved="true">
          <transf name="instantiate" proved="true" arg1="Hinst" arg2="x1">
           <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0" expl="postcondition" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.0" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.25"/></proof>
            </goal>
            <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1" expl="postcondition" proved="true">
            <transf name="instantiate" proved="true" arg1="delta_ext&#39;def" arg2="(start a)">
             <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0" expl="postcondition" proved="true">
             <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
              <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0" expl="postcondition" proved="true">
              <transf name="instantiate" proved="true" arg1="Hinst" arg2="a">
               <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0" expl="postcondition" proved="true">
               <transf name="destruct" proved="true" arg1="Hinst">
                <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0"><result status="valid" time="0.42"/></proof>
                </goal>
                <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1" expl="postcondition" proved="true">
                <transf name="destruct" proved="true" arg1="Hinst">
                 <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.0" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.31"/></proof>
                 </goal>
                 <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.1" expl="postcondition" proved="true">
                 <transf name="destruct" proved="true" arg1="Hinst">
                  <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.1.0" expl="destruct premise" proved="true">
                  <proof prover="0"><result status="valid" time="0.32"/></proof>
                  </goal>
                  <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.1.1" expl="postcondition" proved="true">
                  <transf name="destruct" proved="true" arg1="Hinst">
                   <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.1.1.0" expl="postcondition" proved="true">
                   <proof prover="0"><result status="valid" time="0.19"/></proof>
                   </goal>
                   <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.1.1.1" expl="postcondition" proved="true">
                   <transf name="destruct" proved="true" arg1="Hinst">
                    <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.1.1.1.0" expl="postcondition" proved="true">
                    <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="3.67"/></proof>
                    </goal>
                    <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.1.1.1.1" expl="postcondition" proved="true">
                    <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="2.91"/></proof>
                    <proof prover="2"><result status="valid" time="0.77" steps="2026"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="automatonLangConstr&#39;vc.10.1.1.1.0.0.0.0.1.0.1.0.0.0.1.1.1.2" expl="postcondition" proved="true">
                   <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="8.49"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="automatonLangConstr&#39;vc.10.1.1.1.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.19"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="automatonLangConstr&#39;vc.10.1.2" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.10.1.2.0" expl="postcondition" proved="true">
     <transf name="destruct_term" proved="true" arg1="w">
      <goal name="automatonLangConstr&#39;vc.10.1.2.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="sigma_ext&#39;spec" arg2="(to_fset3 (alphabet a))">
       <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
         <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.21"/></proof>
          </goal>
          <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1" expl="postcondition" proved="true">
          <transf name="instantiate" proved="true" arg1="Hinst" arg2="x1">
           <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0" expl="postcondition" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.0" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.29"/></proof>
            </goal>
            <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1" expl="postcondition" proved="true">
            <transf name="instantiate" proved="true" arg1="delta_ext&#39;def" arg2="(start a)">
             <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0" expl="postcondition" proved="true">
             <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
              <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0" expl="postcondition" proved="true">
              <transf name="instantiate" proved="true" arg1="Hinst" arg2="a">
               <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0" expl="postcondition" proved="true">
               <transf name="destruct" proved="true" arg1="Hinst">
                <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0"><result status="valid" time="0.40"/></proof>
                </goal>
                <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.1" expl="postcondition" proved="true">
                <transf name="destruct" proved="true" arg1="Hinst">
                 <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.1.0" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.29"/></proof>
                 </goal>
                 <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.1.1" expl="postcondition" proved="true">
                 <transf name="destruct" proved="true" arg1="Hinst">
                  <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.1.1.0" expl="destruct premise" proved="true">
                  <proof prover="0"><result status="valid" time="0.30"/></proof>
                  </goal>
                  <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.1.1.1" expl="postcondition" proved="true">
                  <transf name="destruct" proved="true" arg1="Hinst">
                   <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.1.1.1.0" expl="postcondition" proved="true">
                   <proof prover="0"><result status="valid" time="0.21"/></proof>
                   </goal>
                   <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.1.1.1.1" expl="postcondition" proved="true">
                   <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="17.78"/></proof>
                   </goal>
                   <goal name="automatonLangConstr&#39;vc.10.1.2.0.0.0.0.0.1.0.1.0.0.0.1.1.1.2" expl="postcondition" proved="true">
                   <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="13.09"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="automatonLangConstr&#39;vc.10.1.2.0.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.19"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.10.1.2.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.49" steps="1255"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="automatonLangConstr&#39;vc.10.1.3" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.10.1.3.0" expl="postcondition" proved="true">
     <transf name="destruct_term" proved="true" arg1="w">
      <goal name="automatonLangConstr&#39;vc.10.1.3.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="sigma_ext&#39;spec" arg2="(to_fset3 (alphabet a))">
       <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
         <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.22"/></proof>
          </goal>
          <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1" expl="postcondition" proved="true">
          <transf name="instantiate" proved="true" arg1="Hinst" arg2="x1">
           <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0" expl="postcondition" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.0" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.24"/></proof>
            </goal>
            <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1" expl="postcondition" proved="true">
            <transf name="instantiate" proved="true" arg1="delta_ext&#39;def" arg2="(start a)">
             <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0" expl="postcondition" proved="true">
             <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
              <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0" expl="postcondition" proved="true">
              <transf name="instantiate" proved="true" arg1="Hinst" arg2="a">
               <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0" expl="postcondition" proved="true">
               <transf name="destruct" proved="true" arg1="Hinst">
                <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0"><result status="valid" time="0.39"/></proof>
                </goal>
                <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.1" expl="postcondition" proved="true">
                <transf name="destruct" proved="true" arg1="Hinst">
                 <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.1.0" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.31"/></proof>
                 </goal>
                 <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.1.1" expl="postcondition" proved="true">
                 <transf name="destruct" proved="true" arg1="Hinst">
                  <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.1.1.0" expl="destruct premise" proved="true">
                  <proof prover="0"><result status="valid" time="0.27"/></proof>
                  </goal>
                  <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.1.1.1" expl="postcondition" proved="true">
                  <transf name="destruct" proved="true" arg1="Hinst">
                   <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.1.1.1.0" expl="postcondition" proved="true">
                   <proof prover="0"><result status="valid" time="0.20"/></proof>
                   </goal>
                   <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.1.1.1.1" expl="postcondition" proved="true">
                   <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="0.43"/></proof>
                   </goal>
                   <goal name="automatonLangConstr&#39;vc.10.1.3.0.0.0.0.0.1.0.1.0.0.0.1.1.1.2" expl="postcondition" proved="true">
                   <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="0.32"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="automatonLangConstr&#39;vc.10.1.3.0.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.19"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.10.1.3.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.05" steps="35"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.62"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.11.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.11.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.52"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.11.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="automatonLangConstr&#39;vc.11.1.1.0" expl="postcondition" proved="true">
     <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.04" steps="34"/></proof>
     </goal>
     <goal name="automatonLangConstr&#39;vc.11.1.1.1" expl="postcondition" proved="true">
     <proof prover="2" timelimit="5"><result status="valid" time="2.76" steps="10042"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="automatonLangConstr&#39;vc.11.1.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.61" steps="1837"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.11.1.3" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="axiom_filter" proved="true">
 <proof prover="0"><result status="valid" time="0.23"/></proof>
 </goal>
 <goal name="automatonLang&#39;vc" expl="VC for automatonLang" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="automatonLang&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.93"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="2.93"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="2.96"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="compile&#39;vc" expl="VC for compile" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compile&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="compile&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="compile&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="compile&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="compile&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="compile&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="compile&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="compile&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="compile&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="compile&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="compile&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="compile&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="compile&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="compile&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20" steps="414"/></proof>
  </goal>
  <goal name="compile&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="compile&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="compile&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="compile&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="compile&#39;vc.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="compile&#39;vc.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="compile&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="compile&#39;vc.21" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="( s = start \/ s = final )">
   <goal name="compile&#39;vc.21.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.50"/></proof>
   </goal>
   <goal name="compile&#39;vc.21.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="h">
    <goal name="compile&#39;vc.21.1.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="useful">
     <goal name="compile&#39;vc.21.1.0.0" expl="VC for compile" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="compile&#39;vc.21.1.0.0.0" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="reachable">
       <goal name="compile&#39;vc.21.1.0.0.0.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Nil: list char)">
        <goal name="compile&#39;vc.21.1.0.0.0.0.0" proved="true">
        <proof prover="0"><result status="valid" time="0.24"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="compile&#39;vc.21.1.0.0.1" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="productive">
       <goal name="compile&#39;vc.21.1.0.0.1.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Cons eps (Nil:list char))">
        <goal name="compile&#39;vc.21.1.0.0.1.0.0" proved="true">
        <proof prover="0" timelimit="5"><result status="valid" time="2.41"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="compile&#39;vc.21.1.1" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="useful">
     <goal name="compile&#39;vc.21.1.1.0" expl="VC for compile" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="compile&#39;vc.21.1.1.0.0" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="reachable">
       <goal name="compile&#39;vc.21.1.1.0.0.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Cons eps (Nil:list char))">
        <goal name="compile&#39;vc.21.1.1.0.0.0.0" proved="true">
        <proof prover="0" timelimit="5"><result status="valid" time="1.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="compile&#39;vc.21.1.1.0.1" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="productive">
       <goal name="compile&#39;vc.21.1.1.0.1.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Nil: list char)">
        <goal name="compile&#39;vc.21.1.1.0.1.0.0" proved="true">
        <proof prover="0"><result status="valid" time="0.37"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="compile&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.98"/></proof>
  </goal>
  <goal name="compile&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="compile&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="compile&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="compile&#39;vc.27" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="regexLang">
   <goal name="compile&#39;vc.27.0" expl="postcondition" proved="true">
   <transf name="subst_all" proved="true" >
    <goal name="compile&#39;vc.27.0.0" expl="postcondition" proved="true">
    <transf name="compile_match" proved="true" >
     <goal name="compile&#39;vc.27.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="compile&#39;vc.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="compile&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7143957"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="compile&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63"/></proof>
  </goal>
  <goal name="compile&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="compile&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="compile&#39;vc.35" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="( s = start \/ s = final )">
   <goal name="compile&#39;vc.35.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.34"/></proof>
   </goal>
   <goal name="compile&#39;vc.35.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="h">
    <goal name="compile&#39;vc.35.1.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="useful">
     <goal name="compile&#39;vc.35.1.0.0" expl="VC for compile" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="compile&#39;vc.35.1.0.0.0" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="reachable">
       <goal name="compile&#39;vc.35.1.0.0.0.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Nil: list char)">
        <goal name="compile&#39;vc.35.1.0.0.0.0.0" proved="true">
        <proof prover="0"><result status="valid" time="0.23"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="compile&#39;vc.35.1.0.0.1" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="productive">
       <goal name="compile&#39;vc.35.1.0.0.1.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Cons x (Nil:list char))">
        <goal name="compile&#39;vc.35.1.0.0.1.0.0" proved="true">
        <proof prover="0" timelimit="5"><result status="valid" time="1.52"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="compile&#39;vc.35.1.1" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="useful">
     <goal name="compile&#39;vc.35.1.1.0" expl="VC for compile" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="compile&#39;vc.35.1.1.0.0" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="reachable">
       <goal name="compile&#39;vc.35.1.1.0.0.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Cons x (Nil:list char))">
        <goal name="compile&#39;vc.35.1.1.0.0.0.0" proved="true">
        <proof prover="0" timelimit="5"><result status="valid" time="1.49"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="compile&#39;vc.35.1.1.0.1" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="productive">
       <goal name="compile&#39;vc.35.1.1.0.1.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Nil: list char)">
        <goal name="compile&#39;vc.35.1.1.0.1.0.0" proved="true">
        <proof prover="0"><result status="valid" time="0.35"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="compile&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="1.07"/></proof>
  </goal>
  <goal name="compile&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="compile&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="compile&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="compile&#39;vc.41" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="regexLang">
   <goal name="compile&#39;vc.41.0" expl="postcondition" proved="true">
   <transf name="subst_all" proved="true" >
    <goal name="compile&#39;vc.41.0.0" expl="postcondition" proved="true">
    <transf name="compile_match" proved="true" >
     <goal name="compile&#39;vc.41.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.62"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="eclose_df&#39;vc" expl="VC for eclose_df">
 <transf name="split_vc" >
  <goal name="eclose_df&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.1" expl="variant decrease">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="1644996"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.74"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.9" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.12" expl="variant decrease">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="1763658"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.18" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="eclose_df&#39;vc.18.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="eclose_df&#39;vc.18.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="3.63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="eclose_df&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.21"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="eclose_df&#39;vc.19.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.24"/></proof>
   </goal>
   <goal name="eclose_df&#39;vc.19.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.54"/></proof>
   <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="12386038"/></proof>
   <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="eclose_df&#39;vc.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.21" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13" steps="199584"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="eclose_df&#39;vc.25" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="1723013"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" >
   <goal name="eclose_df&#39;vc.25.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.26"/></proof>
   </goal>
   <goal name="eclose_df&#39;vc.25.1" expl="postcondition">
   <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
   <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="29783763"/></proof>
   <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="eclose_df&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_subset_eclose_df">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="1904897"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="lemma_subset_eclose_df.0">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="8374303"/></proof>
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
  <transf name="inline_goal" >
   <goal name="lemma_subset_eclose_df.0.0">
   <transf name="split_all_full" >
    <goal name="lemma_subset_eclose_df.0.0.0">
    <proof prover="0"><result status="timeout" time="1.00"/></proof>
    <proof prover="1"><result status="timeout" time="1.00" steps="1673142"/></proof>
    <proof prover="2"><result status="timeout" time="1.00"/></proof>
    <transf name="split_vc" >
     <goal name="lemma_subset_eclose_df.0.0.0.0">
     <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
     <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="11996393"/></proof>
     <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
