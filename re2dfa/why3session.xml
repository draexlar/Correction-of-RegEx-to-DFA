<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="re2dfa.mlw"/>
<theory name="NFA">
 <goal name="automaton&#39;vc" expl="VC for automaton" proved="true">
 <proof prover="0"><result status="valid" time="0.36"/></proof>
 </goal>
 <goal name="delta_get_1st&#39;vc" expl="VC for delta_get_1st" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="1.18"/></proof>
 </goal>
 <goal name="delta_get_2nd&#39;vc" expl="VC for delta_get_2nd" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="1.77"/></proof>
 </goal>
 <goal name="delta_get_3rd&#39;vc" expl="VC for delta_get_3rd" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="1.63"/></proof>
 </goal>
 <goal name="filter_trans&#39;vc" expl="VC for filter_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="filter_trans&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="filter_trans&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="filter_trans&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="filter_trans&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.15"/></proof>
   </goal>
   <goal name="filter_trans&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.38"/></proof>
   </goal>
   <goal name="filter_trans&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="filter_trans&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="filter_trans&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="filter_trans&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.16"/></proof>
    </goal>
    <goal name="filter_trans&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.23"/></proof>
    </goal>
    <goal name="filter_trans&#39;vc.3.0.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.17"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="filter_trans&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="filter_trans&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.13"/></proof>
    </goal>
    <goal name="filter_trans&#39;vc.3.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.36"/></proof>
    </goal>
    <goal name="filter_trans&#39;vc.3.1.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.18"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="filter_trans&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="delta&#39;vc" expl="VC for delta" proved="true">
 <proof prover="0"><result status="valid" time="0.77"/></proof>
 </goal>
 <goal name="fold_next_states&#39;vc" expl="VC for fold_next_states" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fold_next_states&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="fold_next_states&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="fold_next_states&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.28"/></proof>
   </goal>
   <goal name="fold_next_states&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.33" steps="701"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="fold_next_states&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="226"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eclose&#39;vc" expl="VC for eclose" proved="true">
 <proof prover="2"><result status="valid" time="1.28" steps="4504"/></proof>
 </goal>
 <goal name="fold_delta&#39;vc" expl="VC for fold_delta" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fold_delta&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.49" steps="1524"/></proof>
  </goal>
  <goal name="fold_delta&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="delta_ext&#39;vc" expl="VC for delta_ext">
 <transf name="split_vc" >
  <goal name="delta_ext&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.7" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.15"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.12.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.12.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.12.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="delta_ext&#39;vc.13" expl="postcondition">
  <transf name="split_vc" >
   <goal name="delta_ext&#39;vc.13.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="delta_ext&#39;vc.13.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.38"/></proof>
    </goal>
    <goal name="delta_ext&#39;vc.13.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="timeout" time="1.00"/></proof>
    <proof prover="2"><result status="valid" time="0.29" steps="1285"/></proof>
    </goal>
    <goal name="delta_ext&#39;vc.13.0.2" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H">
     <goal name="delta_ext&#39;vc.13.0.2.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="delta_ext&#39;vc.13.0.2.0.0" expl="destruct premise" proved="true">
      <proof prover="0"><result status="valid" time="0.11"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.13.0.2.0.1" expl="postcondition" proved="true">
      <transf name="subst_all" proved="true" >
       <goal name="delta_ext&#39;vc.13.0.2.0.1.0" expl="postcondition" proved="true">
       <transf name="compile_match" proved="true" >
        <goal name="delta_ext&#39;vc.13.0.2.0.1.0.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.19" steps="572"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="delta_ext&#39;vc.13.0.3" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H">
     <goal name="delta_ext&#39;vc.13.0.3.0" expl="postcondition" proved="true">
     <transf name="subst_all" proved="true" >
      <goal name="delta_ext&#39;vc.13.0.3.0.0" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="delta_ext&#39;vc.13.0.3.0.0.0" expl="destruct premise" proved="true">
       <proof prover="0"><result status="valid" time="0.12"/></proof>
       </goal>
       <goal name="delta_ext&#39;vc.13.0.3.0.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.08" steps="205"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="delta_ext&#39;vc.13.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="delta_ext&#39;vc.13.1.0" expl="postcondition">
    <transf name="subst_all" >
     <goal name="delta_ext&#39;vc.13.1.0.0" expl="postcondition">
     <transf name="eliminate_let_fmla" >
      <goal name="delta_ext&#39;vc.13.1.0.0.0" expl="postcondition">
      <transf name="destruct" arg1="H1">
       <goal name="delta_ext&#39;vc.13.1.0.0.0.0" expl="destruct premise">
       </goal>
       <goal name="delta_ext&#39;vc.13.1.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.22"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     <transf name="unfold" arg1="path">
      <goal name="delta_ext&#39;vc.13.1.0.0.0" expl="VC for delta_ext">
      <transf name="split_vc" >
       <goal name="delta_ext&#39;vc.13.1.0.0.0.0" expl="VC for delta_ext">
       <transf name="eliminate_let_fmla" >
        <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0" expl="VC for delta_ext">
        <transf name="assert" arg1="(mem1 r result -&gt; (mem1 r (add s (empty: fset int)) \/ (exists i. mem1 i result /\ mem1 (i, eps, r) (to_fset (transitions a)))) )">
         <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.27"/></proof>
         </goal>
         <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.1" expl="VC for delta_ext">
         <transf name="destruct" arg1="h">
          <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.09"/></proof>
          </goal>
          <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.1.1" expl="VC for delta_ext">
          <transf name="destruct" arg1="h">
           <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.1.1.0" expl="VC for delta_ext" proved="true">
           <proof prover="0"><result status="valid" time="0.22"/></proof>
           </goal>
           <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.1.1.1" expl="VC for delta_ext">
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        <transf name="subst_all" >
         <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0" expl="VC for delta_ext">
         <transf name="instantiate" arg1="eclose&#39;def" arg2="(add s (empty: fset int))">
          <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0" expl="VC for delta_ext">
          <transf name="instantiate" arg1="Hinst" arg2="a">
           <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0" expl="VC for delta_ext">
           <transf name="destruct" arg1="Hinst">
            <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.13"/></proof>
            </goal>
            <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1" expl="VC for delta_ext">
            <transf name="destruct" arg1="Hinst">
             <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.0" expl="VC for delta_ext" proved="true">
             <proof prover="0"><result status="valid" time="0.19"/></proof>
             </goal>
             <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1" expl="VC for delta_ext">
             <transf name="destruct" arg1="Hinst">
              <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1.0" expl="VC for delta_ext" proved="true">
              <proof prover="0"><result status="valid" time="0.22"/></proof>
              </goal>
              <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1.1" expl="VC for delta_ext">
              <transf name="instantiate" arg1="fold_next_states&#39;def" arg2="(add s (empty: fset int))">
               <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1.1.0" expl="VC for delta_ext">
               <transf name="instantiate" arg1="Hinst" arg2="a">
                <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1.1.0.0" expl="VC for delta_ext">
                <transf name="destruct" arg1="Hinst">
                 <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1.1.0.0.0" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.13"/></proof>
                 </goal>
                 <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1.1.0.0.1" expl="VC for delta_ext">
                 <transf name="destruct" arg1="Hinst">
                  <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1.1.0.0.1.0" expl="VC for delta_ext" proved="true">
                  <proof prover="0"><result status="valid" time="0.19"/></proof>
                  </goal>
                  <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.1.1.0.0.1.1" expl="VC for delta_ext">
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         <transf name="instantiate" arg1="eclose&#39;spec" arg2="(add s (empty: fset int))">
          <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0" expl="VC for delta_ext">
          <transf name="instantiate" arg1="Hinst" arg2="a">
           <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0" expl="VC for delta_ext">
           <transf name="destruct" arg1="Hinst">
            <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
            <proof prover="0"><result status="valid" time="0.14"/></proof>
            </goal>
            <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1" expl="VC for delta_ext">
            <transf name="destruct" arg1="Hinst">
             <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.0" expl="VC for delta_ext">
             <transf name="destruct" arg1="Hinst">
              <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.0.0" expl="VC for delta_ext">
              <transf name="destruct" arg1="Hinst">
               <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.0.0.0" expl="VC for delta_ext">
               <transf name="destruct" arg1="Hinst">
                <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="VC for delta_ext">
                <transf name="destruct" arg1="Hinst">
                 <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="destruct premise">
                 </goal>
                 <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="VC for delta_ext" proved="true">
                 <proof prover="0"><result status="valid" time="0.21"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         <transf name="instantiate" arg1="H4" arg2="r">
          <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0" expl="VC for delta_ext">
          <transf name="destruct" arg1="Hinst">
           <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
           <proof prover="0"><result status="valid" time="0.16"/></proof>
           </goal>
           <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.1" expl="VC for delta_ext">
           <transf name="destruct" arg1="Hinst">
            <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.1.0" expl="VC for delta_ext" proved="true">
            <proof prover="0"><result status="valid" time="0.19"/></proof>
            </goal>
            <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.1.1" expl="VC for delta_ext">
            <transf name="destruct" arg1="Hinst">
             <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.1.1.0" expl="VC for delta_ext">
             <transf name="destruct" arg1="Hinst">
              <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.1.1.0.0" expl="VC for delta_ext">
              <proof prover="0"><result status="timeout" time="1.00"/></proof>
              <proof prover="1"><result status="timeout" time="1.00" steps="1784507"/></proof>
              <proof prover="2"><result status="timeout" time="1.00"/></proof>
              <transf name="assert" arg1="(i = s)">
               <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.1.1.0.0.0" expl="asserted formula">
               <proof prover="0"><result status="timeout" time="1.00"/></proof>
               <proof prover="1"><result status="timeout" time="1.00" steps="1819815"/></proof>
               <proof prover="2"><result status="timeout" time="1.00"/></proof>
               </goal>
               <goal name="delta_ext&#39;vc.13.1.0.0.0.0.0.0.0.1.1.0.0.1" expl="VC for delta_ext" proved="true">
               <proof prover="0"><result status="valid" time="0.13"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="delta_ext&#39;vc.13.1.1" expl="postcondition">
    </goal>
    <goal name="delta_ext&#39;vc.13.1.2" expl="postcondition">
    </goal>
    <goal name="delta_ext&#39;vc.13.1.3" expl="postcondition">
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="automatonLangConstr&#39;vc" expl="VC for automatonLangConstr">
 <transf name="split_vc" >
  <goal name="automatonLangConstr&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="automatonLangConstr&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="automatonLangConstr&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="automatonLangConstr&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automatonLangConstr&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.33"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.3.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.3.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.72"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.3.4" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.38"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="valid" time="0.95" steps="1159180"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="automatonLangConstr&#39;vc.5" expl="postcondition">
  <transf name="split_vc" >
   <goal name="automatonLangConstr&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.28" steps="923"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.5.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="automatonLangConstr&#39;vc.5.1.0" expl="postcondition">
    </goal>
    <goal name="automatonLangConstr&#39;vc.5.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.24"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.5.1.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.5.1.3" expl="postcondition">
    <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
    <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="27523249"/></proof>
    <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.5.1.4" expl="postcondition">
    <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
    <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="35039022"/></proof>
    <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLangConstr&#39;vc.6" expl="postcondition">
  <transf name="split_vc" >
   <goal name="automatonLangConstr&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="automatonLangConstr&#39;vc.6.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.0.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.31"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.0.3" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.80"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.0.4" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.30"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="automatonLangConstr&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.34"/></proof>
   </goal>
   <goal name="automatonLangConstr&#39;vc.6.2" expl="postcondition">
   <transf name="split_vc" >
    <goal name="automatonLangConstr&#39;vc.6.2.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.2.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.30"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.2.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.2.3" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="( (not (inter (delta_ext (start a) w a) (to_fset1 (finalStates a))) = (empty: fset int)) -&gt; (path (start a) w (pick (to_fset1 (finalStates a))) a) )">
     <goal name="automatonLangConstr&#39;vc.6.2.3.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="delta_ext&#39;spec" arg2="(start a)">
      <goal name="automatonLangConstr&#39;vc.6.2.3.0.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
       <goal name="automatonLangConstr&#39;vc.6.2.3.0.0.0" expl="asserted formula" proved="true">
       <transf name="instantiate" proved="true" arg1="Hinst" arg2="a">
        <goal name="automatonLangConstr&#39;vc.6.2.3.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="automatonLangConstr&#39;vc.6.2.3.0.0.0.0.0" expl="destruct premise" proved="true">
         <proof prover="0"><result status="valid" time="0.25"/></proof>
         </goal>
         <goal name="automatonLangConstr&#39;vc.6.2.3.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="automatonLangConstr&#39;vc.6.2.3.0.0.0.0.1.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.20"/></proof>
          <proof prover="1"><result status="valid" time="0.05" steps="11797"/></proof>
          <proof prover="2"><result status="valid" time="0.04" steps="28"/></proof>
          </goal>
          <goal name="automatonLangConstr&#39;vc.6.2.3.0.0.0.0.1.1" expl="asserted formula" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="automatonLangConstr&#39;vc.6.2.3.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <transf name="instantiate" proved="true" arg1="Hinst" arg2="(pick (to_fset1 (finalStates a)))">
            <goal name="automatonLangConstr&#39;vc.6.2.3.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
            <proof prover="0"><result status="timeout" time="1.00"/></proof>
            <proof prover="1"><result status="valid" time="0.13" steps="287357"/></proof>
            <proof prover="2"><result status="timeout" time="1.00"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="automatonLangConstr&#39;vc.6.2.3.1" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.23"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="automatonLangConstr&#39;vc.6.2.4" expl="postcondition">
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compile&#39;vc" expl="VC for compile">
 <transf name="split_vc" >
  <goal name="compile&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="compile&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="compile&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="compile&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="compile&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="compile&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="compile&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="compile&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="compile&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="compile&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="334"/></proof>
  </goal>
  <goal name="compile&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="compile&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="compile&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="compile&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="compile&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="compile&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="compile&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="compile&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="compile&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="compile&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="compile&#39;vc.20" expl="postcondition">
  <transf name="unfold" arg1="regexLang">
   <goal name="compile&#39;vc.20.0" expl="postcondition">
   <transf name="subst_all" >
    <goal name="compile&#39;vc.20.0.0" expl="postcondition">
    <transf name="compile_match" >
     <goal name="compile&#39;vc.20.0.0.0" expl="postcondition">
     <transf name="split_vc" >
      <goal name="compile&#39;vc.20.0.0.0.0" expl="postcondition">
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="compile&#39;vc.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="compile&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="compile&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="compile&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="compile&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="compile&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="compile&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="compile&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="compile&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="compile&#39;vc.31" expl="postcondition">
  <transf name="unfold" arg1="regexLang">
   <goal name="compile&#39;vc.31.0" expl="postcondition">
   <transf name="subst_all" >
    <goal name="compile&#39;vc.31.0.0" expl="postcondition">
    <transf name="compile_match" >
     <goal name="compile&#39;vc.31.0.0.0" expl="postcondition">
     <transf name="split_vc" >
      <goal name="compile&#39;vc.31.0.0.0.0" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="timeout" time="2.00"/></proof>
      <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="5227813"/></proof>
      <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
