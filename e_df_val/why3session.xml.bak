<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.3.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="e_df_val.mlw"/>
<theory name="RegEx" proved="true">
 <goal name="regex_wf&#39;vc" expl="VC for regex_wf" proved="true">
 <proof prover="2"><result status="valid" time="0.08"/></proof>
 </goal>
</theory>
<theory name="RevListProp" proved="true">
 <goal name="hd_tl_reverse" proved="true">
 <proof prover="2"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="hd_tl_reverse2" proved="true">
 <proof prover="2"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="hd_tl_reverse3" proved="true">
 <proof prover="2"><result status="valid" time="0.10"/></proof>
 </goal>
 <goal name="hd_tl_reverse4" proved="true">
 <proof prover="2"><result status="valid" time="0.06"/></proof>
 </goal>
</theory>
<theory name="NFA">
 <goal name="automaton&#39;vc" expl="VC for automaton" proved="true">
 <proof prover="2"><result status="valid" time="0.36"/></proof>
 </goal>
 <goal name="delta_get_1st&#39;vc" expl="VC for delta_get_1st" proved="true">
 <proof prover="2"><result status="valid" time="0.77"/></proof>
 </goal>
 <goal name="delta_get_2nd&#39;vc" expl="VC for delta_get_2nd" proved="true">
 <proof prover="2"><result status="valid" time="1.08"/></proof>
 </goal>
 <goal name="delta_get_3rd&#39;vc" expl="VC for delta_get_3rd" proved="true">
 <proof prover="2"><result status="valid" time="1.30"/></proof>
 </goal>
 <goal name="filter_trans&#39;vc" expl="VC for filter_trans" proved="true">
 <proof prover="2"><result status="valid" time="1.19"/></proof>
 </goal>
 <goal name="delta&#39;vc" expl="VC for delta" proved="true">
 <proof prover="2"><result status="valid" time="4.41"/></proof>
 </goal>
 <goal name="lemma_path_eps_transition" proved="true">
 <proof prover="2"><result status="valid" time="0.26"/></proof>
 </goal>
 <goal name="lemma_path_eps_cons_snoc" proved="true">
 <proof prover="2"><result status="valid" time="0.27"/></proof>
 </goal>
 <goal name="lemma_path_eps_middle" proved="true">
 <proof prover="2"><result status="valid" time="0.21"/></proof>
 </goal>
 <goal name="fold_delta&#39;vc" expl="VC for fold_delta" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="2717212"/></proof>
 <proof prover="1"><result status="valid" time="4.01" steps="9340"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="lemma_mon_fold_delta" proved="true">
 <proof prover="1"><result status="valid" time="0.13" steps="258"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="fold_eclose_df&#39;vc" expl="VC for fold_eclose_df" proved="true">
 <proof prover="0" obsolete="true"><result status="highfailure" time="3.98" steps="2593325"/></proof>
 <proof prover="1"><result status="valid" time="5.13" steps="13792"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="lemma_path_htap">
 <transf name="split_vc" >
  <goal name="lemma_path_htap.0">
  <transf name="unfold" arg1="path" arg2="in" arg3="H">
   <goal name="lemma_path_htap.0.0">
   <transf name="destruct" arg1="H">
    <goal name="lemma_path_htap.0.0.0" expl="destruct premise" proved="true">
    <proof prover="0" timelimit="1"><result status="valid" time="0.05" steps="13067"/></proof>
    <proof prover="1" timelimit="1"><result status="valid" time="0.04" steps="6"/></proof>
    <proof prover="2"><result status="valid" time="0.18"/></proof>
    </goal>
    <goal name="lemma_path_htap.0.0.1">
    <transf name="destruct" arg1="H">
     <goal name="lemma_path_htap.0.0.1.0" proved="true">
     <proof prover="2"><result status="valid" time="0.29"/></proof>
     </goal>
     <goal name="lemma_path_htap.0.0.1.1" proved="true">
     <proof prover="2"><result status="valid" time="0.41"/></proof>
     </goal>
     <goal name="lemma_path_htap.0.0.1.2">
     <transf name="split_vc" >
      <goal name="lemma_path_htap.0.0.1.2.0">
      <transf name="unfold" arg1="htap">
       <goal name="lemma_path_htap.0.0.1.2.0.0">
       <transf name="split_vc" >
        <goal name="lemma_path_htap.0.0.1.2.0.0.0" proved="true">
        <proof prover="1" timelimit="1"><result status="valid" time="0.07" steps="19"/></proof>
        <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
        </goal>
        <goal name="lemma_path_htap.0.0.1.2.0.0.1" proved="true">
        <proof prover="1" timelimit="1"><result status="valid" time="0.10" steps="95"/></proof>
        <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
        </goal>
        <goal name="lemma_path_htap.0.0.1.2.0.0.2" proved="true">
        <proof prover="1" timelimit="1"><result status="valid" time="0.10" steps="97"/></proof>
        <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
        </goal>
        <goal name="lemma_path_htap.0.0.1.2.0.0.3" proved="true">
        <proof prover="1" timelimit="1"><result status="valid" time="0.10" steps="91"/></proof>
        <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
        </goal>
        <goal name="lemma_path_htap.0.0.1.2.0.0.4" proved="true">
        <proof prover="2" timelimit="1"><result status="valid" time="0.28"/></proof>
        </goal>
        <goal name="lemma_path_htap.0.0.1.2.0.0.5" proved="true">
        <proof prover="1"><result status="valid" time="0.22" steps="396"/></proof>
        <proof prover="2"><result status="timeout" time="5.00"/></proof>
        </goal>
        <goal name="lemma_path_htap.0.0.1.2.0.0.6">
        <transf name="split_vc" >
         <goal name="lemma_path_htap.0.0.1.2.0.0.6.0">
         <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="56170440"/></proof>
         <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
         <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="lemma_path_htap.1">
  </goal>
 </transf>
 </goal>
 <goal name="delta_ext&#39;vc" expl="VC for delta_ext" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="delta_ext&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.10.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.10.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.10.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.16"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.10.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.18"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="delta_ext&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.32"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.11.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="19"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.11.2" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="htap" arg2="in" arg3="H">
    <goal name="delta_ext&#39;vc.11.2.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="delta_ext&#39;vc.11.2.0.0" expl="destruct premise" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.20"/></proof>
     </goal>
     <goal name="delta_ext&#39;vc.11.2.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="delta_ext&#39;vc.11.2.0.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.46"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.11.2.0.1.1" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="0.25" steps="1086"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.11.2.0.1.2" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.58"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="delta_ext&#39;vc.11.3" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="1.65" steps="4119"/></proof>
   <proof prover="2"><result status="timeout" time="5.00"/></proof>
   <transf name="unfold" proved="true" arg1="htap" arg2="in" arg3="H">
    <goal name="delta_ext&#39;vc.11.3.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="delta_ext&#39;vc.11.3.0.0" expl="destruct premise" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.15"/></proof>
     </goal>
     <goal name="delta_ext&#39;vc.11.3.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="delta_ext&#39;vc.11.3.0.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.37"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.11.3.0.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.53"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.11.3.0.1.2" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="delta_ext&#39;vc.11.3.0.1.2.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="H1">
        <goal name="delta_ext&#39;vc.11.3.0.1.2.0.0" expl="postcondition" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="6674828"/></proof>
        <proof prover="1"><result status="valid" time="0.09" steps="252"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
        <goal name="delta_ext&#39;vc.11.3.0.1.2.0.1" expl="postcondition" proved="true">
        <proof prover="0" obsolete="true"><result status="highfailure" time="4.38" steps="6623038"/></proof>
        <proof prover="1"><result status="valid" time="0.14" steps="269"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="delta_ext&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.33"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.45"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.12.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="134"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.12.2" expl="postcondition" proved="true">
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H">
    <goal name="delta_ext&#39;vc.12.2.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="delta_ext&#39;vc.12.2.0.0" expl="destruct premise" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.17"/></proof>
     </goal>
     <goal name="delta_ext&#39;vc.12.2.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="delta_ext&#39;vc.12.2.0.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.42"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.12.2.0.1.1" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="0.24" steps="1217"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.12.2.0.1.2" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.59"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="delta_ext&#39;vc.12.3" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="highfailure" time="4.14" steps="9239975"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="valid" time="0.36"/></proof>
   <transf name="unfold" arg1="path" arg2="in" arg3="H">
    <goal name="delta_ext&#39;vc.12.3.0" expl="postcondition">
    <transf name="destruct" arg1="H">
     <goal name="delta_ext&#39;vc.12.3.0.0" expl="destruct premise" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.17"/></proof>
     </goal>
     <goal name="delta_ext&#39;vc.12.3.0.1" expl="postcondition">
     <transf name="destruct" arg1="H">
      <goal name="delta_ext&#39;vc.12.3.0.1.0" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.12.3.0.1.1" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="0.09" steps="236"/></proof>
      </goal>
      <goal name="delta_ext&#39;vc.12.3.0.1.2" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="highfailure" time="3.85" steps="6670074"/></proof>
      <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="split_vc" >
       <goal name="delta_ext&#39;vc.12.3.0.1.2.0" expl="postcondition">
       <transf name="eliminate_let_fmla" >
        <goal name="delta_ext&#39;vc.12.3.0.1.2.0.0" expl="postcondition">
        <transf name="split_vc" >
         <goal name="delta_ext&#39;vc.12.3.0.1.2.0.0.0" expl="postcondition">
         <transf name="assert" arg1="(hd (reverse (Cons x1 (Cons w1 w))) = x)">
          <goal name="delta_ext&#39;vc.12.3.0.1.2.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="2" timelimit="1"><result status="valid" time="0.24"/></proof>
          </goal>
          <goal name="delta_ext&#39;vc.12.3.0.1.2.0.0.0.1" expl="postcondition">
          <transf name="assert" arg1="(hd (reverse (Cons x1 (Cons w1 w))) = hd (reverse (Cons w1 w)))">
           <goal name="delta_ext&#39;vc.12.3.0.1.2.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="2" timelimit="1"><result status="valid" time="0.37"/></proof>
           </goal>
           <goal name="delta_ext&#39;vc.12.3.0.1.2.0.0.0.1.1" expl="postcondition">
           <proof prover="0" obsolete="true"><result status="timeout" time="30.00" steps="51463973"/></proof>
           <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
           <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_path_eps_concat">
 <transf name="split_vc" >
  <goal name="lemma_path_eps_concat.0">
  <transf name="eliminate_inductive" >
   <goal name="lemma_path_eps_concat.0.0">
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_fold_eclose">
 <proof prover="0" obsolete="true"><result status="highfailure" time="3.75" steps="3121413"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="lemma_mon_fold_eclose">
 <proof prover="0" obsolete="true"><result status="highfailure" time="3.81" steps="3831613"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="lemma_union_fold_eclose">
 <proof prover="0" obsolete="true"><result status="highfailure" time="3.67" steps="2789137"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="lemma_close_eclose">
 <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="3902232"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="lemma_subset_eclose_df">
 <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="4710302"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
</theory>
</file>
</why3session>
