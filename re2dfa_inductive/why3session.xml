<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.3.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="re2dfa_inductive.mlw"/>
<theory name="BasicTypes">
 <goal name="lemma_eqeq_eq">
 <proof prover="0"><result status="highfailure" time="4.01" steps="10892724"/></proof>
 <proof prover="1"><result status="timeout" time="5.00"/></proof>
 <proof prover="2"><result status="timeout" time="5.00"/></proof>
 </goal>
</theory>
<theory name="RegEx" proved="true">
 <goal name="neutral_left_concat" proved="true">
 <proof prover="2"><result status="valid" time="0.23"/></proof>
 </goal>
 <goal name="neutral_rigth_concat" proved="true">
 <proof prover="2"><result status="valid" time="0.18"/></proof>
 </goal>
 <goal name="not_empty_concat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_empty_concat.0" proved="true">
  <transf name="instantiate" proved="true" arg1="concat_def" arg2="l1">
   <goal name="not_empty_concat.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="l2">
    <goal name="not_empty_concat.0.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(exists u v. mem1 u l1 /\ mem1 v l2)">
     <goal name="not_empty_concat.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.18"/></proof>
     </goal>
     <goal name="not_empty_concat.0.0.0.1" proved="true">
     <transf name="introduce_exists" proved="true" >
      <goal name="not_empty_concat.0.0.0.1.0" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="(u++v)">
       <goal name="not_empty_concat.0.0.0.1.0.0" proved="true">
       <proof prover="2"><result status="valid" time="0.19"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="empty_concat" proved="true">
 <proof prover="2"><result status="valid" time="0.15"/></proof>
 </goal>
 <goal name="composition_concat" proved="true">
 <proof prover="2"><result status="valid" time="0.13"/></proof>
 </goal>
 <goal name="concat_belong1" proved="true">
 <proof prover="2"><result status="valid" time="0.07"/></proof>
 </goal>
 <goal name="concat_belong2" proved="true">
 <proof prover="2"><result status="valid" time="0.07"/></proof>
 </goal>
 <goal name="subset_equality" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="subset_equality.0" proved="true">
  <proof prover="2"><result status="valid" time="0.16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_equality" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_equality.0" proved="true">
  <transf name="assert" proved="true" arg1="(subset l1 l2)">
   <goal name="set_equality.0.0" expl="asserted formula" proved="true">
   <proof prover="2"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="set_equality.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(subset l2 l1)">
    <goal name="set_equality.0.1.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.19"/></proof>
    </goal>
    <goal name="set_equality.0.1.1" proved="true">
    <proof prover="2"><result status="valid" time="0.17"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="RevListProp" proved="true">
 <goal name="hd_tl_reverse" proved="true">
 <proof prover="2"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="hd_tl_reverse2" proved="true">
 <proof prover="2"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="hd_tl_reverse3" proved="true">
 <proof prover="2"><result status="valid" time="0.11"/></proof>
 </goal>
 <goal name="hd_tl_reverse4" proved="true">
 <proof prover="2"><result status="valid" time="0.06"/></proof>
 </goal>
</theory>
<theory name="NFA">
 <goal name="automaton&#39;vc" expl="VC for automaton" proved="true">
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2"><result status="valid" time="0.50"/></proof>
 </goal>
 <goal name="delta_get_1st&#39;vc" expl="VC for delta_get_1st" proved="true">
 <proof prover="2"><result status="valid" time="1.06"/></proof>
 </goal>
 <goal name="delta_get_2nd&#39;vc" expl="VC for delta_get_2nd" proved="true">
 <proof prover="2"><result status="valid" time="1.47"/></proof>
 </goal>
 <goal name="delta_get_3rd&#39;vc" expl="VC for delta_get_3rd" proved="true">
 <proof prover="2"><result status="valid" time="1.47"/></proof>
 </goal>
 <goal name="filter_trans&#39;vc" expl="VC for filter_trans" proved="true">
 <proof prover="2"><result status="valid" time="1.60"/></proof>
 </goal>
 <goal name="delta&#39;vc" expl="VC for delta" proved="true">
 <proof prover="1"><result status="valid" time="2.98" steps="3410"/></proof>
 </goal>
 <goal name="lemma_path_eps_transition" proved="true">
 <proof prover="2"><result status="valid" time="0.35"/></proof>
 </goal>
 <goal name="lemma_transition_path_eps" proved="true">
 <proof prover="2"><result status="valid" time="0.16"/></proof>
 </goal>
 <goal name="lemma_path_eps_cons_snoc" proved="true">
 <proof prover="0" obsolete="true"><result status="highfailure" time="4.36" steps="4384907"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2"><result status="valid" time="0.39"/></proof>
 </goal>
 <goal name="lemma_path_eps_middle" proved="true">
 <proof prover="0" obsolete="true"><result status="highfailure" time="3.19" steps="3864569"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2"><result status="valid" time="0.84"/></proof>
 </goal>
 <goal name="fold_delta&#39;vc" expl="VC for fold_delta" proved="true">
 <proof prover="1"><result status="valid" time="3.55" steps="11203"/></proof>
 </goal>
 <goal name="lemma_mon_fold_delta" proved="true">
 <proof prover="0" obsolete="true"><result status="highfailure" time="3.69" steps="3650049"/></proof>
 <proof prover="1"><result status="valid" time="0.10" steps="438"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="fold_eclose&#39;vc" expl="VC for fold_eclose" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fold_eclose&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="fold_eclose&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="fold_eclose&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.58"/></proof>
  </goal>
  <goal name="fold_eclose&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.38" steps="1262"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="fold_eclose&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="fold_eclose&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="fold_eclose&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.46" steps="1101"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_path_htap">
 <transf name="split_vc" >
  <goal name="lemma_path_htap.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="3586200"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="lemma_path_htap.1">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="3639203"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="delta_ext&#39;vc" expl="VC for delta_ext" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="delta_ext&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="delta_ext&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.13"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.13"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.1.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="delta_ext&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="54152685"/></proof>
   <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
   <proof prover="2"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="27"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.2.2" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="htap" arg2="in" arg3="H">
    <goal name="delta_ext&#39;vc.2.2.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="delta_ext&#39;vc.2.2.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.07" steps="56"/></proof>
     </goal>
     <goal name="delta_ext&#39;vc.2.2.0.1" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.13" steps="755"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
     </goal>
     <goal name="delta_ext&#39;vc.2.2.0.2" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="63"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="delta_ext&#39;vc.2.3" expl="postcondition" proved="true">
   <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="highfailure" time="26.06" steps="8994200"/></proof>
   <proof prover="1"><result status="valid" time="0.25" steps="792"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="delta_ext&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="27"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.3.2" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="4000888"/></proof>
   <proof prover="1"><result status="valid" time="0.08" steps="54"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.3.3" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="12209196"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="valid" time="0.46"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="delta_ext&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="delta_ext&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="4420006"/></proof>
   <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="0.05" steps="27"/></proof>
   <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="2830098"/></proof>
   <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="0.12" steps="109"/></proof>
   <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.4.2" expl="postcondition" proved="true">
   <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="11.75" steps="31236"/></proof>
   </goal>
   <goal name="delta_ext&#39;vc.4.3" expl="postcondition" proved="true">
   <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="6848374"/></proof>
   <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="27.42" steps="40825"/></proof>
   <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="delta_ext&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_trans_from_start">
 <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="1739822"/></proof>
 <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="lemma_trans_from_start.0">
  <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="18793931"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="accepted_words&#39;vc" expl="VC for accepted_words" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="accepted_words&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="accepted_words&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   </goal>
   <goal name="accepted_words&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="accepted_words&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="accepted_words&#39;vc.0.1.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="accepted_words&#39;vc.0.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="0.25" steps="778"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="axiom_filter" proved="true">
 <proof prover="2"><result status="valid" time="0.34"/></proof>
 </goal>
 <goal name="automatonLang&#39;vc" expl="VC for automatonLang">
 <transf name="split_vc" >
  <goal name="automatonLang&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="119"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="8550881"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.66"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.60"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.64"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="3158603"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="5722085"/></proof>
  <proof prover="1" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="424390"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="2259352"/></proof>
  <proof prover="1"><result status="valid" time="0.63" steps="2139"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="automatonLang&#39;vc.14" expl="postcondition">
  <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="13689921"/></proof>
  <proof prover="1" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="assert" arg1="(cardinal (to_fset (transitions a)) = 1 )">
   <goal name="automatonLang&#39;vc.14.0" expl="asserted formula" proved="true">
   <proof prover="2"><result status="valid" time="4.20"/></proof>
   </goal>
   <goal name="automatonLang&#39;vc.14.1" expl="postcondition">
   <transf name="assert" arg1="(mem2 (Cons x (Nil: list char)) result)">
    <goal name="automatonLang&#39;vc.14.1.0" expl="asserted formula" proved="true">
    <proof prover="2" timelimit="1"><result status="valid" time="0.47"/></proof>
    </goal>
    <goal name="automatonLang&#39;vc.14.1.1" expl="postcondition">
    <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="13291123"/></proof>
    <proof prover="1" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="inline_goal" >
     <goal name="automatonLang&#39;vc.14.1.1.0" expl="postcondition">
     <transf name="split_all_full" >
      <goal name="automatonLang&#39;vc.14.1.1.0.0" expl="postcondition">
      <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="84464615"/></proof>
      <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
      <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  <transf name="inline_goal" >
   <goal name="automatonLang&#39;vc.14.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="automatonLang&#39;vc.14.0.0" expl="postcondition">
    <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="70903477"/></proof>
    <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
    <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
    <transf name="assert" arg1="(cardinal (to_fset (transitions a)) = 1 )">
     <goal name="automatonLang&#39;vc.14.0.0.0" expl="asserted formula" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.84"/></proof>
     </goal>
     <goal name="automatonLang&#39;vc.14.0.0.1" expl="postcondition">
     <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="2216843"/></proof>
     <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automatonLang&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eps_trans&#39;vc" expl="VC for add_eps_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_eps_trans&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="add_eps_trans&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="add_eps_trans&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="add_eps_trans&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="add_eps_trans&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.71"/></proof>
  </goal>
  <goal name="add_eps_trans&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="add_eps_trans&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.55"/></proof>
  </goal>
  <goal name="add_eps_trans&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="add_eps_trans&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="automaton_concat&#39;vc" expl="VC for automaton_concat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="automaton_concat&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.63" steps="1645"/></proof>
  <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="automaton_concat&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.92" steps="2148"/></proof>
   <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   </goal>
   <goal name="automaton_concat&#39;vc.7.1" expl="precondition" proved="true">
   <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="1449286"/></proof>
   <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="1.79"/></proof>
   </goal>
   <goal name="automaton_concat&#39;vc.7.2" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.91" steps="2157"/></proof>
   <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="automaton_concat&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="automaton_concat&#39;vc.11" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="( to_fset (mk (empty: fset (int, char, int))) = (empty: fset (int, char, int)) )">
   <goal name="automaton_concat&#39;vc.11.0" expl="asserted formula" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.38"/></proof>
   </goal>
   <goal name="automaton_concat&#39;vc.11.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(o1 = (mk (empty: fset (int, char, int))) )">
    <goal name="automaton_concat&#39;vc.11.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(o1 == (mk (empty: fset (int, char, int))) )">
     <goal name="automaton_concat&#39;vc.11.1.0.0" expl="asserted formula" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.37"/></proof>
     </goal>
     <goal name="automaton_concat&#39;vc.11.1.0.1" expl="asserted formula" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.35"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="automaton_concat&#39;vc.11.1.1" expl="postcondition" proved="true">
    <proof prover="2" timelimit="1"><result status="valid" time="0.35"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="automaton_concat&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_word_concat">
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <transf name="split_vc" >
  <goal name="lemma_word_concat.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="9244722"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_alang_concat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_alang_concat.0" proved="true">
  <transf name="instantiate" proved="true" arg1="lemma_word_concat" arg2="a">
   <goal name="lemma_alang_concat.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="b">
    <goal name="lemma_alang_concat.0.0.0" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="c">
     <goal name="lemma_alang_concat.0.0.0.0" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
      <goal name="lemma_alang_concat.0.0.0.0.0" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="lemma_alang_concat.0.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="2"><result status="valid" time="0.86"/></proof>
       </goal>
       <goal name="lemma_alang_concat.0.0.0.0.0.1" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="4069173"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="2"><result status="valid" time="0.55"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_concat_word">
 </goal>
 <goal name="lemma_concat_alang" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_concat_alang.0" proved="true">
  <transf name="instantiate" proved="true" arg1="lemma_concat_word" arg2="a">
   <goal name="lemma_concat_alang.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="b">
    <goal name="lemma_concat_alang.0.0.0" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="c">
     <goal name="lemma_concat_alang.0.0.0.0" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="u">
      <goal name="lemma_concat_alang.0.0.0.0.0" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="v">
       <goal name="lemma_concat_alang.0.0.0.0.0.0" proved="true">
       <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
        <goal name="lemma_concat_alang.0.0.0.0.0.0.0" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="lemma_concat_alang.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
         <proof prover="2" timelimit="1"><result status="valid" time="0.85"/></proof>
         </goal>
         <goal name="lemma_concat_alang.0.0.0.0.0.0.0.1" proved="true">
         <proof prover="2"><result status="valid" time="0.73"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="automaton_union&#39;vc" expl="VC for automaton_union" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="automaton_union&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.23" steps="3014"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.26"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.06"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="automaton_union&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_word_union">
 <transf name="split_vc" >
  <goal name="lemma_word_union.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="10227058"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_alang_union" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_alang_union.0" proved="true">
  <transf name="instantiate" proved="true" arg1="lemma_word_union" arg2="a">
   <goal name="lemma_alang_union.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="b">
    <goal name="lemma_alang_union.0.0.0" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="c">
     <goal name="lemma_alang_union.0.0.0.0" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
      <goal name="lemma_alang_union.0.0.0.0.0" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="i">
       <goal name="lemma_alang_union.0.0.0.0.0.0" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="lemma_alang_union.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="2" timelimit="1"><result status="valid" time="0.59"/></proof>
        </goal>
        <goal name="lemma_alang_union.0.0.0.0.0.0.1" proved="true">
        <proof prover="2"><result status="valid" time="0.49"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_union_word">
 <transf name="split_vc" >
  <goal name="lemma_union_word.0">
  <proof prover="0"><result status="timeout" time="5.00" steps="6652626"/></proof>
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="lemma_union_word.1">
  </goal>
 </transf>
 </goal>
 <goal name="lemma_union_alang" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_union_alang.0" proved="true">
  <transf name="instantiate" proved="true" arg1="lemma_union_word" arg2="a">
   <goal name="lemma_union_alang.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="b">
    <goal name="lemma_union_alang.0.0.0" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="c">
     <goal name="lemma_union_alang.0.0.0.0" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="w">
      <goal name="lemma_union_alang.0.0.0.0.0" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="i">
       <goal name="lemma_union_alang.0.0.0.0.0.0" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="lemma_union_alang.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="2" timelimit="1"><result status="valid" time="0.95"/></proof>
        </goal>
        <goal name="lemma_union_alang.0.0.0.0.0.0.1" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="7932514"/></proof>
        <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="2"><result status="valid" time="0.89"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="compile&#39;vc" expl="VC for compile" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compile&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="compile&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="compile&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="compile&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="compile&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="compile&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.64"/></proof>
  </goal>
  <goal name="compile&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="compile&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="5068996"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="compile&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.52"/></proof>
  </goal>
  <goal name="compile&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.26" steps="4320223"/></proof>
  <proof prover="1"><result status="valid" time="0.11" steps="160"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="5673051"/></proof>
  <proof prover="1"><result status="valid" time="0.17" steps="347"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.11" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="regexLang">
   <goal name="compile&#39;vc.11.0" expl="postcondition" proved="true">
   <transf name="subst_all" proved="true" >
    <goal name="compile&#39;vc.11.0.0" expl="postcondition" proved="true">
    <transf name="compile_match" proved="true" >
     <goal name="compile&#39;vc.11.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.82"/></proof>
     <transf name="eliminate_let" >
      <goal name="compile&#39;vc.11.0.0.0.0" expl="postcondition">
      <transf name="assert" arg1="(forall w. mem2 w (concat (regexLang x1) (regexLang x)) &lt;-&gt; mem2 w (automatonLang (automaton_concat a b)) )">
       <goal name="compile&#39;vc.45.0.0.0.0.0" expl="asserted formula">
       <transf name="split_vc" >
        <goal name="compile&#39;vc.45.0.0.0.0.0.0" expl="asserted formula">
        <proof prover="0" timelimit="10" memlimit="4000" obsolete="true"><result status="highfailure" time="6.35" steps="4064399"/></proof>
        <proof prover="1" timelimit="10" memlimit="4000" obsolete="true"><result status="timeout" time="10.00"/></proof>
        <proof prover="2" timelimit="10" memlimit="4000" obsolete="true"><result status="timeout" time="10.00"/></proof>
        </goal>
        <goal name="compile&#39;vc.45.0.0.0.0.0.1" expl="asserted formula">
        <proof prover="0" timelimit="10" memlimit="4000" obsolete="true"><result status="highfailure" time="6.47" steps="3913641"/></proof>
        <proof prover="1" timelimit="10" memlimit="4000" obsolete="true"><result status="timeout" time="10.00"/></proof>
        <proof prover="2" timelimit="10" memlimit="4000" obsolete="true"><result status="timeout" time="10.00"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="compile&#39;vc.45.0.0.0.0.1" expl="postcondition">
       <proof prover="0" obsolete="true"><result status="highfailure" time="2.46" steps="1895349"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     <transf name="instantiate" arg1="lemma_word_concat" arg2="a">
      <goal name="compile&#39;vc.45.0.0.0.0" expl="postcondition">
      <transf name="instantiate" arg1="Hinst" arg2="b">
       <goal name="compile&#39;vc.45.0.0.0.0.0" expl="postcondition">
       <transf name="instantiate" arg1="Hinst" arg2="(automaton_concat a b)">
        <goal name="compile&#39;vc.45.0.0.0.0.0.0" expl="postcondition">
        <transf name="instantiate" arg1="automatonLang&#39;spec" arg2="(automaton_concat a b)">
         <goal name="compile&#39;vc.45.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="destruct" arg1="Hinst">
          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.0" expl="destruct premise">
          <transf name="destruct" arg1="Hinst">
           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0" expl="destruct premise">
           <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.40"/></proof>
           </goal>
           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1" expl="postcondition">
           <transf name="destruct" arg1="Hinst">
            <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0" expl="postcondition">
            <transf name="destruct" arg1="Hinst">
             <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0" expl="postcondition">
             <transf name="destruct" arg1="Hinst">
              <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0" expl="postcondition">
              <transf name="destruct" arg1="Hinst">
               <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0" expl="postcondition">
               <transf name="destruct" arg1="Hinst">
                <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0" expl="postcondition">
                <transf name="destruct" arg1="Hinst">
                 <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0" expl="postcondition">
                 <transf name="destruct" arg1="Hinst">
                  <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0" expl="postcondition">
                  <transf name="destruct" arg1="Hinst">
                   <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0" expl="postcondition">
                   <transf name="destruct" arg1="Hinst">
                    <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
                    <transf name="destruct" arg1="Hinst">
                     <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                     <transf name="destruct" arg1="Hinst">
                      <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                      <transf name="destruct" arg1="Hinst">
                       <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                       <transf name="destruct" arg1="Hinst">
                        <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                        <transf name="destruct" arg1="Hinst">
                         <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                         <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="highfailure" time="23.46" steps="9581136"/></proof>
                         <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
                         <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
                         <transf name="destruct" arg1="Hinst1">
                          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                          <proof prover="0" obsolete="true"><result status="highfailure" time="3.71" steps="3587430"/></proof>
                          <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
                          <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
                          <transf name="introduce_exists" >
                           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                           <transf name="destruct" arg1="Hinst1">
                            <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="postcondition">
                            <transf name="destruct" arg1="Hinst1">
                             <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="postcondition">
                             <transf name="instantiate" arg1="Hinst17" arg2="w">
                              <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="postcondition">
                              <transf name="eliminate_let_fmla" >
                               <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="postcondition">
                               <transf name="destruct" arg1="Hinst">
                                <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="destruct premise">
                                <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
                                </goal>
                                <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="postcondition">
                                <transf name="introduce_exists" >
                                 <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0" expl="postcondition">
                                 <transf name="destruct" arg1="Hinst">
                                  <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0" expl="postcondition">
                                  <transf name="destruct" arg1="Hinst">
                                   <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0" expl="postcondition">
                                   <transf name="destruct" arg1="Hinst">
                                    <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0" expl="postcondition">
                                    <transf name="destruct" arg1="Hinst">
                                     <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0" expl="postcondition">
                                     <transf name="assert" arg1="(mem2 u (automatonLang a))">
                                      <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula">
                                      <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
                                      </goal>
                                      <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1" expl="postcondition">
                                      <transf name="assert" arg1="(mem2 v (automatonLang b))">
                                       <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.0" expl="asserted formula">
                                       <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.79"/></proof>
                                       </goal>
                                       <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1" expl="postcondition">
                                       <transf name="instantiate" arg1="composition_concat" arg2="u">
                                        <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1.0" expl="postcondition">
                                        <transf name="instantiate" arg1="Hinst" arg2="v">
                                         <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1.0.0" expl="postcondition">
                                         <transf name="instantiate" arg1="Hinst" arg2="(automatonLang a)">
                                          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1.0.0.0" expl="postcondition">
                                          <transf name="instantiate" arg1="Hinst" arg2="(automatonLang b)">
                                           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1.0.0.0.0" expl="postcondition">
                                           <transf name="destruct" arg1="Hinst">
                                            <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1.0.0.0.0.0" expl="destruct premise">
                                            <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.28"/></proof>
                                            </goal>
                                            <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1.0.0.0.0.1" expl="postcondition">
                                            <transf name="assert" arg1="(mem2 w (concat (automatonLang a) (automatonLang b)))">
                                             <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1.0.0.0.0.1.0" expl="asserted formula">
                                             <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.39"/></proof>
                                             </goal>
                                             <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1.1.0.0.0.0.1.1" expl="postcondition">
                                             <proof prover="0" obsolete="true"><result status="highfailure" time="3.95" steps="4518116"/></proof>
                                             <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
                                             <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
                                             </goal>
                                            </transf>
                                            </goal>
                                           </transf>
                                           </goal>
                                          </transf>
                                          </goal>
                                         </transf>
                                         </goal>
                                        </transf>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition">
                          <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1" expl="postcondition">
          <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     <transf name="instantiate" arg1="lemma_alang_concat" arg2="a">
      <goal name="compile&#39;vc.45.0.0.0.0" expl="postcondition">
      <transf name="instantiate" arg1="Hinst" arg2="b">
       <goal name="compile&#39;vc.45.0.0.0.0.0" expl="postcondition">
       <transf name="instantiate" arg1="Hinst" arg2="(automaton_concat a b)">
        <goal name="compile&#39;vc.45.0.0.0.0.0.0" expl="postcondition">
        <transf name="instantiate" arg1="automatonLang&#39;spec" arg2="(automaton_concat a b)">
         <goal name="compile&#39;vc.45.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="destruct" arg1="Hinst">
          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.0" expl="destruct premise">
          <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
          </goal>
          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1" expl="postcondition">
          <transf name="destruct" arg1="Hinst">
           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0" expl="postcondition">
           <transf name="destruct" arg1="Hinst">
            <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0" expl="postcondition">
            <transf name="destruct" arg1="Hinst">
             <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0" expl="postcondition">
             <transf name="destruct" arg1="Hinst">
              <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0" expl="postcondition">
              <transf name="destruct" arg1="Hinst">
               <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="postcondition">
               <transf name="destruct" arg1="Hinst">
                <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="postcondition">
                <transf name="destruct" arg1="Hinst">
                 <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="postcondition">
                 <transf name="destruct" arg1="Hinst">
                  <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="postcondition">
                  <transf name="destruct" arg1="Hinst">
                   <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
                   <transf name="destruct" arg1="Hinst">
                    <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                    <transf name="destruct" arg1="Hinst">
                     <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                     <transf name="destruct" arg1="Hinst">
                      <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                      <transf name="destruct" arg1="Hinst">
                       <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                       <transf name="destruct" arg1="Hinst">
                        <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                        <transf name="destruct" arg1="Hinst">
                         <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                         <transf name="destruct" arg1="Hinst1">
                          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                          <transf name="destruct" arg1="Hinst1">
                           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="postcondition">
                           <transf name="destruct" arg1="Hinst1">
                            <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="postcondition">
                            <transf name="destruct" arg1="Hinst1">
                             <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="postcondition">
                             <transf name="instantiate" arg1="Hinst17" arg2="w">
                              <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="postcondition">
                              <transf name="eliminate_let_fmla" >
                               <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="postcondition">
                               <transf name="destruct" arg1="Hinst">
                                <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="destruct premise">
                                <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
                                </goal>
                                <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="postcondition">
                                <transf name="introduce_exists" >
                                 <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0" expl="postcondition">
                                 <transf name="assert" arg1="(mem2 w (automatonLang (automaton_concat a b)))">
                                  <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0" expl="asserted formula">
                                  <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.23"/></proof>
                                  </goal>
                                  <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.1" expl="postcondition">
                                  <proof prover="0" obsolete="true"><result status="highfailure" time="3.57" steps="3825337"/></proof>
                                  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
                                  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
                                  <transf name="assert" arg1="(mem2 w (concat (automatonLang a) (automatonLang b)))">
                                   <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.1.0" expl="asserted formula">
                                   <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.43"/></proof>
                                   </goal>
                                   <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.1.1" expl="postcondition">
                                   <transf name="assert" arg1="(automatonLang (automaton_concat a b) = (concat (automatonLang a) (automatonLang b)) )">
                                    <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.1.1.0" expl="asserted formula">
                                    <proof prover="0" obsolete="true"><result status="highfailure" time="3.57" steps="3570422"/></proof>
                                    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
                                    <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
                                    </goal>
                                    <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.1.1.1" expl="postcondition">
                                    <proof prover="2" obsolete="true"><result status="valid" time="0.37"/></proof>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition">
                          <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0" expl="destruct premise">
           <proof prover="2" timelimit="1"><result status="valid" time="0.89"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="compile&#39;vc.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="compile&#39;vc.14" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.61"/></proof>
  </goal>
  <goal name="compile&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.38" steps="3574241"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.61"/></proof>
  </goal>
  <goal name="compile&#39;vc.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.55"/></proof>
  </goal>
  <goal name="compile&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.31" steps="4019520"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="compile&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="3615896"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="assert" proved="true" arg1="(s = start \/ s = final )">
   <goal name="compile&#39;vc.18.0" expl="asserted formula" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.45"/></proof>
   </goal>
   <goal name="compile&#39;vc.18.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="h">
    <goal name="compile&#39;vc.18.1.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="useful">
     <goal name="compile&#39;vc.18.1.0.0" expl="VC for compile" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="compile&#39;vc.18.1.0.0.0" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="reachable">
       <goal name="compile&#39;vc.18.1.0.0.0.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Cons eps (Nil:list char))">
        <goal name="compile&#39;vc.18.1.0.0.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.54"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="compile&#39;vc.18.1.0.0.1" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="productive">
       <goal name="compile&#39;vc.18.1.0.0.1.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Nil:list char)">
        <goal name="compile&#39;vc.18.1.0.0.1.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.89"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="compile&#39;vc.18.1.1" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="useful">
     <goal name="compile&#39;vc.18.1.1.0" expl="VC for compile" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="compile&#39;vc.18.1.1.0.0" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="reachable">
       <goal name="compile&#39;vc.18.1.1.0.0.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Nil:list char)">
        <goal name="compile&#39;vc.18.1.1.0.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.64"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="compile&#39;vc.18.1.1.0.1" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="productive">
       <goal name="compile&#39;vc.18.1.1.0.1.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Cons eps (Nil:list char))">
        <goal name="compile&#39;vc.18.1.1.0.1.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.62"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="compile&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="1.20"/></proof>
  </goal>
  <goal name="compile&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="compile&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="1446834"/></proof>
  <proof prover="1"><result status="valid" time="0.16" steps="207"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.23" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="regexLang">
   <goal name="compile&#39;vc.23.0" expl="postcondition" proved="true">
   <transf name="subst_all" proved="true" >
    <goal name="compile&#39;vc.23.0.0" expl="postcondition" proved="true">
    <transf name="compile_match" proved="true" >
     <goal name="compile&#39;vc.23.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="8484427"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="2"><result status="valid" time="0.66"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.24" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.64"/></proof>
  </goal>
  <goal name="compile&#39;vc.25" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="compile&#39;vc.26" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.63"/></proof>
  </goal>
  <goal name="compile&#39;vc.27" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.68"/></proof>
  <transf name="assert" arg1="(mem2 x (to_fset3 (alphabet a)) \/ mem2 x (to_fset3 (alphabet b)))">
   <goal name="compile&#39;vc.53.0" expl="asserted formula">
   <proof prover="2"><result status="valid" time="0.37"/></proof>
   </goal>
   <goal name="compile&#39;vc.53.1" expl="precondition">
   <proof prover="1"><result status="valid" time="0.52" steps="1478"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.28" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.65"/></proof>
  </goal>
  <goal name="compile&#39;vc.29" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="compile&#39;vc.30" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(s = start \/ s = final )">
   <goal name="compile&#39;vc.30.0" expl="asserted formula" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.50"/></proof>
   </goal>
   <goal name="compile&#39;vc.30.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="h">
    <goal name="compile&#39;vc.30.1.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="useful">
     <goal name="compile&#39;vc.30.1.0.0" expl="VC for compile" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="compile&#39;vc.30.1.0.0.0" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="reachable">
       <goal name="compile&#39;vc.30.1.0.0.0.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Nil: list char)">
        <goal name="compile&#39;vc.30.1.0.0.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.50"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="compile&#39;vc.30.1.0.0.1" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="productive">
       <goal name="compile&#39;vc.30.1.0.0.1.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Cons eps (Nil:list char))">
        <goal name="compile&#39;vc.30.1.0.0.1.0.0" proved="true">
        <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="2214690"/></proof>
        <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <proof prover="2"><result status="valid" time="0.58"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="compile&#39;vc.30.1.1" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="useful">
     <goal name="compile&#39;vc.30.1.1.0" expl="VC for compile" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="compile&#39;vc.30.1.1.0.0" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="reachable">
       <goal name="compile&#39;vc.30.1.1.0.0.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Cons eps (Nil: list char))">
        <goal name="compile&#39;vc.30.1.1.0.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.51"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="compile&#39;vc.30.1.1.0.1" expl="VC for compile" proved="true">
      <transf name="unfold" proved="true" arg1="productive">
       <goal name="compile&#39;vc.30.1.1.0.1.0" expl="VC for compile" proved="true">
       <transf name="exists" proved="true" arg1="(Nil:list char)">
        <goal name="compile&#39;vc.30.1.1.0.1.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.66"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="compile&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="4395783"/></proof>
  <proof prover="1"><result status="valid" time="0.16" steps="171"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="compile&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="5566971"/></proof>
  <proof prover="1"><result status="valid" time="0.31" steps="812"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.35" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="regexLang">
   <goal name="compile&#39;vc.35.0" expl="postcondition" proved="true">
   <transf name="subst_all" proved="true" >
    <goal name="compile&#39;vc.35.0.0" expl="postcondition" proved="true">
    <transf name="compile_match" proved="true" >
     <goal name="compile&#39;vc.35.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="9751757"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="2"><result status="valid" time="0.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.36" expl="variant decrease" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.31" steps="2779613"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="compile&#39;vc.37" expl="precondition" proved="true">
  <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="8813354"/></proof>
  <proof prover="1" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="compile&#39;vc.38" expl="variant decrease" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.04" steps="2974465"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="compile&#39;vc.39" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.17" steps="4937613"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="compile&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="compile&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="6104267"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.55"/></proof>
  </goal>
  <goal name="compile&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="4914237"/></proof>
  <proof prover="1"><result status="valid" time="0.11" steps="171"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00" steps="18987083"/></proof>
  <proof prover="1" timelimit="1"><result status="valid" time="0.56" steps="1707"/></proof>
  <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="assert" arg1="((r = Empty) -&gt; (r = Eps \/
(forall a:char. r = Symb a \/ (forall e:regex, f:regex. r = Plus e f)) = false) )">
   <goal name="compile&#39;vc.43.0" expl="asserted formula" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.16" steps="49"/></proof>
   <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   </goal>
   <goal name="compile&#39;vc.43.1" expl="postcondition">
   <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="2.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.33" steps="4180735"/></proof>
  <proof prover="1"><result status="valid" time="3.68" steps="11399"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.45" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="regexLang">
   <goal name="compile&#39;vc.45.0" expl="postcondition" proved="true">
   <transf name="subst_all" proved="true" >
    <goal name="compile&#39;vc.45.0.0" expl="postcondition" proved="true">
    <transf name="compile_match" proved="true" >
     <goal name="compile&#39;vc.45.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" arg1="lemma_alang_concat" arg2="a">
      <goal name="compile&#39;vc.45.0.0.0.0" expl="postcondition">
      <transf name="instantiate" arg1="Hinst" arg2="b">
       <goal name="compile&#39;vc.45.0.0.0.0.0" expl="postcondition">
       <transf name="instantiate" arg1="Hinst" arg2="(automaton_concat a b)">
        <goal name="compile&#39;vc.45.0.0.0.0.0.0" expl="postcondition">
        <transf name="instantiate" arg1="automatonLang&#39;spec" arg2="(automaton_concat a b)">
         <goal name="compile&#39;vc.45.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="destruct" arg1="Hinst">
          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="8108663"/></proof>
          <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="2"><result status="valid" time="0.35"/></proof>
          </goal>
          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1" expl="postcondition">
          <transf name="destruct" arg1="Hinst">
           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0" expl="postcondition">
           <transf name="destruct" arg1="Hinst">
            <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0" expl="postcondition">
            <transf name="destruct" arg1="Hinst">
             <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0" expl="postcondition">
             <transf name="destruct" arg1="Hinst">
              <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0" expl="postcondition">
              <transf name="destruct" arg1="Hinst">
               <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="postcondition">
               <transf name="destruct" arg1="Hinst">
                <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="postcondition">
                <transf name="destruct" arg1="Hinst">
                 <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="postcondition">
                 <transf name="destruct" arg1="Hinst">
                  <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="postcondition">
                  <transf name="destruct" arg1="Hinst">
                   <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
                   <transf name="destruct" arg1="Hinst">
                    <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                    <transf name="destruct" arg1="Hinst">
                     <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                     <transf name="destruct" arg1="Hinst">
                      <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                      <transf name="destruct" arg1="Hinst">
                       <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                       <transf name="destruct" arg1="Hinst">
                        <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                        <transf name="destruct" arg1="Hinst">
                         <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                         <transf name="destruct" arg1="Hinst">
                          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                          <transf name="destruct" arg1="Hinst">
                           <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="postcondition">
                           <transf name="instantiate" arg1="Hinst16" arg2="w">
                            <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="postcondition">
                            <transf name="eliminate_let_fmla" >
                             <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="postcondition">
                             <transf name="destruct" arg1="Hinst">
                              <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="destruct premise">
                              <proof prover="2"><result status="valid" time="0.42"/></proof>
                              </goal>
                              <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1" expl="postcondition">
                              <transf name="assert" arg1="(mem2 w (concat (automatonLang a) (automatonLang b)))">
                               <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.0" expl="asserted formula">
                               <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="0.19" steps="336868"/></proof>
                               <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="0.11" steps="65"/></proof>
                               <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="0.34"/></proof>
                               </goal>
                               <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.1" expl="postcondition">
                               <transf name="instantiate" arg1="set_equality" arg2="(automatonLang (automaton_concat a b))">
                                <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.1.0" expl="postcondition">
                                <transf name="instantiate" arg1="Hinst" arg2="(concat (automatonLang a) (automatonLang b))">
                                 <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.1.0.0" expl="postcondition">
                                 <transf name="destruct" arg1="Hinst">
                                  <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.1.0.0.0" expl="destruct premise">
                                  <transf name="split_vc" >
                                   <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.1.0.0.0.0">
                                   <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="8921707"/></proof>
                                   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
                                   <proof prover="2"><result status="valid" time="0.59"/></proof>
                                   </goal>
                                   <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.1.0.0.0.1">
                                   <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="8609346"/></proof>
                                   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
                                   <proof prover="2"><result status="valid" time="1.51"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1.1.0.0.1" expl="postcondition">
                                  <proof prover="2"><result status="valid" time="0.36"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="compile&#39;vc.45.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition">
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     <transf name="instantiate" proved="true" arg1="set_equality" arg2="(automatonLang (automaton_concat a b))">
      <goal name="compile&#39;vc.45.0.0.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="(concat (automatonLang a) (automatonLang b))">
       <goal name="compile&#39;vc.45.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="compile&#39;vc.45.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="compile&#39;vc.45.0.0.0.0.0.0.0" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="4591024"/></proof>
         <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="2"><result status="valid" time="0.48"/></proof>
         </goal>
         <goal name="compile&#39;vc.45.0.0.0.0.0.0.1" proved="true">
         <proof prover="2"><result status="valid" time="0.73"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="compile&#39;vc.45.0.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.34"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="compile&#39;vc.46" expl="variant decrease" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="3.96" steps="2830178"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="compile&#39;vc.47" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="5968696"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="compile&#39;vc.48" expl="variant decrease" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="2840272"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="compile&#39;vc.49" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.30" steps="4538408"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="compile&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="compile&#39;vc.51" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="4.38" steps="3853792"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="compile&#39;vc.52" expl="postcondition" proved="true">
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="compile&#39;vc.53" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="4935025"/></proof>
  <proof prover="1"><result status="valid" time="0.49" steps="902"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.54" expl="postcondition" proved="true">
  <proof prover="0" memlimit="2000"><result status="timeout" time="5.00" steps="7785927"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="5.84" steps="22580"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
  </goal>
  <goal name="compile&#39;vc.55" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="regexLang">
   <goal name="compile&#39;vc.55.0" expl="postcondition" proved="true">
   <transf name="subst_all" proved="true" >
    <goal name="compile&#39;vc.55.0.0" expl="postcondition" proved="true">
    <transf name="compile_match" proved="true" >
     <goal name="compile&#39;vc.55.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="set_equality" arg2="(automatonLang (automaton_union i a b))">
      <goal name="compile&#39;vc.55.0.0.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="(union (automatonLang a) (automatonLang b))">
       <goal name="compile&#39;vc.55.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="compile&#39;vc.55.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="compile&#39;vc.55.0.0.0.0.0.0.0" proved="true">
         <proof prover="2"><result status="valid" time="0.56"/></proof>
         </goal>
         <goal name="compile&#39;vc.55.0.0.0.0.0.0.1" proved="true">
         <proof prover="2"><result status="valid" time="0.59"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="compile&#39;vc.55.0.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="5.00" steps="6365276"/></proof>
        <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="2"><result status="valid" time="0.35"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_path_middle">
 <transf name="split_vc" >
  <goal name="lemma_path_middle.0">
  </goal>
 </transf>
 </goal>
 <goal name="lemma_path_concat">
 <transf name="split_vc" >
  <goal name="lemma_path_concat.0">
  </goal>
 </transf>
 </goal>
 <goal name="lemma_path_eps_concat">
 <transf name="split_vc" >
  <goal name="lemma_path_eps_concat.0">
  <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="highfailure" time="25.54" steps="26761190"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
  <transf name="instantiate" arg1="lemma_path_eps_transition" arg2="x">
   <goal name="lemma_path_eps_concat.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="y">
    <goal name="lemma_path_eps_concat.0.0.0">
    <transf name="instantiate" arg1="Hinst" arg2="a">
     <goal name="lemma_path_eps_concat.0.0.0.0">
     <transf name="destruct" arg1="Hinst">
      <goal name="lemma_path_eps_concat.0.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="2" timelimit="1"><result status="valid" time="0.24"/></proof>
      </goal>
      <goal name="lemma_path_eps_concat.0.0.0.0.1">
      <transf name="case" arg1="(x = y)">
       <goal name="lemma_path_eps_concat.0.0.0.0.1.0" expl="true case" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.41"/></proof>
       </goal>
       <goal name="lemma_path_eps_concat.0.0.0.0.1.1" expl="false case">
       <transf name="instantiate" arg1="lemma_path_eps_cons_snoc" arg2="x">
        <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0" expl="false case">
        <transf name="instantiate" arg1="Hinst" arg2="y">
         <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0" expl="false case">
         <transf name="instantiate" arg1="Hinst" arg2="a">
          <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0.0" expl="false case">
          <transf name="destruct" arg1="Hinst">
           <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0.0.0" expl="destruct premise" proved="true">
           <proof prover="2" timelimit="1"><result status="valid" time="0.28"/></proof>
           </goal>
           <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0.0.1" expl="false case">
           <transf name="destruct" arg1="Hinst">
            <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0.0.1.0" expl="false case">
            <transf name="destruct" arg1="Hinst">
             <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0.0.1.0.0" expl="false case">
             <transf name="destruct" arg1="Hinst">
              <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0.0.1.0.0.0" expl="false case">
              <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="2283094"/></proof>
              <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
              <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
              </goal>
              <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0.0.1.0.0.1" expl="false case">
              <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="2347310"/></proof>
              <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
              <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      <transf name="destruct" arg1="Hinst">
       <goal name="lemma_path_eps_concat.0.0.0.0.1.0">
       <transf name="destruct" arg1="Hinst">
        <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0">
        <transf name="eliminate_inductive" >
         <goal name="lemma_path_eps_concat.0.0.0.0.1.1.0.0">
         </goal>
        </transf>
        </goal>
        <goal name="lemma_path_eps_concat.0.0.0.0.1.1.1">
        <proof prover="2" obsolete="true"><result status="valid" time="1.66"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="lemma_path_eps_concat.0.0.0.0.1.1" proved="true">
       <proof prover="2"><result status="valid" time="2.57"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma_close_eclose" proved="true">
 <proof prover="2"><result status="valid" time="0.35"/></proof>
 </goal>
 <goal name="lemma_subset_eclose_df" proved="true">
 <proof prover="2"><result status="valid" time="0.77"/></proof>
 <transf name="split_vc" >
  <goal name="lemma_subset_eclose_df.0">
  <proof prover="0" memlimit="2000" obsolete="true"><result status="timeout" time="5.00" steps="7391884"/></proof>
  <proof prover="1" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" memlimit="2000" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="inline_goal" >
   <goal name="lemma_subset_eclose_df.0.0">
   <transf name="split_all_full" >
    <goal name="lemma_subset_eclose_df.0.0.0">
    <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="2392091"/></proof>
    <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="split_vc" >
     <goal name="lemma_subset_eclose_df.0.0.0.0">
     <proof prover="0" timelimit="30" memlimit="4000" obsolete="true"><result status="highfailure" time="26.84" steps="26265319"/></proof>
     <proof prover="1" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
     <proof prover="2" timelimit="30" memlimit="4000" obsolete="true"><result status="timeout" time="30.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
