module BasicTypes

  use seq.Seq, list.List

  type char

  val eq (c1 c2: char) : bool
    ensures { result <-> c1 = c2 }

  val constant eps : char (* used for representing the empty transitions *)

  
  (* defining input symbols and alphabet *)
  type symbol = char

  clone import set.SetApp as SA with type elt = symbol

  
  (* defining word and language as a set *)
  type word = list symbol

  clone import set.SetApp as SL with type elt = word

  
  (* defining a state and a set of states *)
  type state = int

  clone import set.SetApp as SS with type elt = state

  
  (* defining a transition and a set of transitions *)
  type transition = (state , symbol , state)

  clone import set.SetApp as ST with type elt = transition
  
  predicate (==) (a b: ST.set) =
    a.to_fset = b.to_fset
    
  lemma lemma_eqeq_eq:
    forall a b. a == b -> a = b

end


module RegEx

  use BasicTypes
  use list.List, list.Append
  use set.Fset

  (* Type representing a Regular Expression *)
  type regex =
      Empty
    | Eps
    | Symb symbol
    | Seq regex regex
    | Plus regex regex
    
  predicate regex_wf (r: regex) 
  =
    match r with
    | Symb a -> a <> eps
    | Seq e f -> regex_wf e /\ regex_wf f
    | Plus e f -> regex_wf e /\ regex_wf f
    | _ -> true 
    end
  
  (* Type guaranteeing the RegExs are well formed
  type regex_wf = {
    regex: regex
  } invariant { match regex with
                | Symb a -> a <> eps
                | _ -> true end }
  meta coercion function regex*)
                
  function concat (a: fset word) (b: fset word) : fset word
  axiom concat_def:
    forall a b: fset word, w: word. mem w (concat a b) <-> exists w1 w2. mem w1 a /\ mem w2 b /\ w = (w1 ++ w2)
    
  lemma neutral_left_concat:
    forall l1 l2: fset word. is_empty l1 -> is_empty (concat l1 l2)
    
  lemma neutral_rigth_concat:
    forall l1 l2: fset word. is_empty l2 -> is_empty (concat l1 l2)
    
  lemma not_empty_concat:
    forall l1 l2: fset word. not is_empty l1 /\ not is_empty l2 -> not is_empty (concat l1 l2)
    
  lemma empty_concat:
    forall l1 l2: fset word. is_empty (concat l1 l2) -> ( is_empty l1 \/ is_empty l2 )
  
  lemma composition_concat:
    forall w1 w2: word, l1 l2: fset word.
      mem w1 l1 /\ mem w2 l2 -> mem (w1++w2) (concat l1 l2)
      
  lemma concat_belong1:
    forall w: word, l1 l2 l3: fset word.
      mem w (concat l2 l3) /\ l1 = (concat l2 l3) -> mem w l1
      
  lemma concat_belong2:
    forall w: word, l1 l2 l3: fset word.
      mem w l1 /\ l1 = (concat l2 l3) -> mem w (concat l2 l3)
  
  lemma subset_equality:
    forall l1 l2: fset word.
      (forall w. mem w l1 -> mem w l2) -> subset l1 l2
  
  (*lemma set_equality:
    forall l1 l2: fset word.
      subset l1 l2 /\ (subset l2 l1) -> l1 = l2*)
      
  lemma set_equality:
    forall l1 l2: fset word.
      (forall w. mem w l1 -> mem w l2) /\ (forall w. mem w l2 -> mem w l1) -> l1 = l2

  (* Given a Regular Expression, this returns its language *)
  function regexLang (r: regex) : fset word =
      match r with
      | Empty -> empty
      | Eps -> add (Cons eps Nil) empty
      | Symb a -> add (Cons a Nil) empty
      | Seq e f -> let l = regexLang e in
                   let m = regexLang f in
                   concat l m
      | Plus e f -> union (regexLang e) (regexLang f) (* << r *)
      end
    

end

module RevListProp

  (* This module defines properties of the reverse of a list. *)
  
  use list.List, list.HdTlNoOpt, list.Reverse
  
  (* The head of the reverse of the reverse of a list is the same as the head of the list *)
  lemma hd_tl_reverse:
    forall w xs:list 'a, x:'a. w = Cons x xs -> ( hd (reverse (reverse w)) = x /\ tl (reverse (reverse w)) = xs )
    
  (* The head of the reverse of the reverse of a list is the same as the head of the list *)
  lemma hd_tl_reverse2:
    forall w xs ys:list 'a, x y:'a. w = Cons x xs /\ reverse w = Cons y ys -> hd (reverse (Cons y ys)) = x
    
  (* The head of the reverse a list is the same as the head of the reverse of the tail of that list *)  
  lemma hd_tl_reverse3:
    forall w xs:list 'a, x:'a. w = Cons x xs /\ xs <> Nil -> hd (reverse w) = hd (reverse xs)
    
  (* The head of the reverse of the tail of the reverse of a list is the same as the head of the list *)
  lemma hd_tl_reverse4:
    forall w xs ys:list 'a, x y:'a. w = Cons x xs /\ xs <> Nil /\ reverse w = Cons y ys -> hd (reverse ys) = x
  
end


module NFA

  use BasicTypes, RegEx, ref.Ref, RevListProp
  use import list.Mem as LM
  use import list.Reverse as LR
  use list.List, list.Length, list.Append, list.HdTlNoOpt
  use int.Int
  use set.Fset
 
  val constant start_const: state

  (* Type representing an NFA *)
  type automaton = {
    states: SS.set;
    alphabet: SA.set;
    start: state;
    transitions: ST.set;
    finalStates: SS.set;
  } invariant { mem start states } (* start must be one of the defined states *)
    invariant { not (is_empty states) } (* automaton is non empty: at least one state *)
    invariant { not mem eps alphabet } (* epsilon is not part of the alphabet *)
    invariant { forall x. mem x alphabet -> exists a, c. mem (a,x,c) transitions } (* if a symbol is in the alphabet, then there must be a tansition with that symbol *)
    invariant { subset finalStates states } (* finalStates must be defined in the automaton *)
    invariant { forall t: transition. mem t transitions ->
                  let (a,b,c) = t in mem a states /\ mem b (add eps alphabet) /\ mem c states } (* the initial and final state of a transition must be defined in the automaton, and the transition symbol must be epsilon or in the alphabet *)
    by { states = SS.singleton start_const; alphabet = SA.empty ();
         start = start_const; transitions = ST.empty (); finalStates = SS.empty () }

  
  (* --- Operations over finite automatons --- *)

  (* Given a set of transitions t, returns a set with the initial states of each of the transitions in t *)
  let rec ghost function delta_get_1st (t: fset transition) : fset state 
    variant { cardinal t }
    ensures { forall x. mem x result -> exists b c. mem (x, b, c) t }
    ensures { forall a, b, c. mem (a, b, c) t -> mem a result }
  =
    if is_empty t then empty
    else let elem = pick t in
         let (a,_,_) = elem in
           add a (delta_get_1st (remove elem t))

  (* Given a set of transitions t, returns a set with the symbols of each of the transitions in t *)
  let rec ghost function delta_get_2nd (t: fset transition) : fset symbol
    variant { cardinal t }
    ensures { forall x. mem x result -> exists a c. mem (a, x, c) t }
    ensures { forall a, b, c. mem (a, b, c) t -> mem b result }
  =
    if is_empty t then empty
    else let elem = pick t in
         let (_,b,_) = elem in
           add b (delta_get_2nd (remove elem t))

  (* Given a set of transitions t, returns a set with the final states of each of the transitions in t *)
  let rec ghost function delta_get_3rd (t: fset transition) : fset state
    variant { cardinal t }
    ensures { forall x. mem x result -> exists a b. mem (a, b, x) t }
    ensures { forall a, b, c. mem (a, b, c) t -> mem c result }
  =
    if is_empty t then empty
    else let elem = pick t in
         let (_,_,c) = elem in
           add c (delta_get_3rd (remove elem t))
  
  
  (* Returns a set of transitions with initial state s and executed by symbol sym *)
  let rec ghost function filter_trans (s: state) (sym: symbol) (t: fset transition) : fset transition
    (* requires { mem s a.states } *)
    (* provar subconjunto do que entrou *)
    variant { cardinal t }
    ensures { subset result t }
    ensures { forall a, b, c. mem (a, b, c) result -> b = sym /\ a = s }
    ensures { forall c. mem (s, sym, c) t -> mem (s, sym, c) result }
    ensures { (not exists c. mem (s, sym, c) t) -> is_empty result }
  =
    if is_empty t then empty
    else let elem = pick t in
         let (a,b,_) = elem in
           if s = a && eq b sym then
             add elem (filter_trans s sym (remove elem t))
           else filter_trans s sym (remove elem t)

  (* Returns states reachable from s through sym *)
  let ghost function delta (s: state) (sym: symbol) (a: automaton) : fset state
    (*requires { mem s a.states }*)
    ensures  { subset result a.states }
    ensures  { forall c. mem (s, sym, c) a.transitions <-> mem c result }
    ensures  { (not exists c. mem (s, sym, c) a.transitions) -> is_empty result }
  =
    let t = BasicTypes.ST.to_fset a.transitions in
    let trans = filter_trans s sym t in
      delta_get_3rd trans

  
  use seq.Seq
  use seq.ToFset
  
  inductive path_eps state state automaton
  =
    | path_base: forall s a. mem s a.states -> path_eps s s a
    | path_ind: forall s q r a. (*mem s a.states /\ mem q a.states /\ mem r a.states ->*) mem (s, eps, q) a.transitions -> path_eps q r a -> path_eps s r a
      
  lemma lemma_path_eps_transition:
    forall s, f: state, a:automaton.
      path_eps s f a -> s = f \/ mem (s, eps, f) a.transitions \/ exists x. (mem (s, eps, x) a.transitions /\ path_eps x f a)
      
  lemma lemma_transition_path_eps:
    forall s f: state, a:automaton.
      (mem s a.states /\ s = f) \/ mem (s, eps, f) a.transitions \/ exists x. (mem (s, eps, x) a.transitions /\ path_eps x f a) -> path_eps s f a
      
  lemma lemma_path_eps_cons_snoc:
    forall s, f: state, a: automaton.
      path_eps s f a /\ s <> f -> exists q. mem q a.states /\ ( (mem (s, eps, q) a.transitions /\ path_eps q f a) \/ (path_eps s q a /\ mem (q, eps, f) a.transitions) )
      
  lemma lemma_path_eps_middle:
    forall x  z: state, a: automaton.
      path_eps x z a -> exists y. path_eps x y a /\ path_eps y z a
  
  (* True if there is a path from state s to f, through word w. *)       
  predicate path (s: state) (w: word) (f: state) (a: automaton)
  =
    match w with
    | Nil -> (*s = f \/ mem f (eclose_df s a)*) path_eps s f a
    | Cons x Nil -> mem x (add eps a.alphabet) /\
                    if x = eps then (*path s Nil f a*) (*s = f \/ mem f (eclose_df s a)*) path_eps s f a
                    else mem (s, x, f) a.transitions \/ 
                        (exists q. (path_eps s q a) /\ mem (q, x, f) a.transitions) \/ 
                        (exists q, r. (path_eps s q a) /\ mem (q, x, r) a.transitions /\ (path_eps r f a))
    | Cons x xs -> xs <> Nil /\ mem x (add eps a.alphabet) /\
                   exists r. (*path s (Cons x Nil) r a*) 
                             (mem (s, x, r) a.transitions \/ (exists q. (path_eps s q a) /\ mem (q, x, r) a.transitions)) /\ 
                             path r xs f a
    end 
  
  predicate htap (f: state) (w: word) (s: state) (a: automaton)
  =
   match w with
   | Nil -> (*s = f \/ mem f (eclose_df s a)*) path_eps s f a
   | Cons x Nil -> mem x (add eps a.alphabet) /\
                   if x = eps then (*path s Nil f a*) (*s = f \/ mem f (eclose_df s a)*) path_eps s f a
                   else mem (s, x, f) a.transitions \/ 
                       (exists q. (path_eps s q a) /\ mem (q, x, f) a.transitions) \/ 
                       (exists q, r. (path_eps s q a) /\ mem (q, x, r) a.transitions /\ (path_eps r f a))
   | Cons x xs -> xs <> Nil /\ mem x (add eps a.alphabet) /\
                  exists r. (*path s (Cons x Nil) r a*) 
                            ( mem (r, x, f) a.transitions \/ (exists q. mem (r, x, q) a.transitions /\ (path_eps q f a)) ) /\ 
                            htap r xs s a
   end 
   
  
  use import seq.Mem as SM
  use seq.Distinct
  use import set.Fset as FS
  
  (* ECLOSE *)
  val ghost function eclose (s: state) (a: automaton) : fset state 
    (*requires { mem s a.states }*)
    ensures  { subset result a.states }
    ensures  { mem s result }
    ensures  { forall f. mem f result -> f = s \/ (exists i. mem i result /\ mem (i, eps, f) a.transitions) }
    ensures  { forall i, f. mem i result /\ mem (i, eps, f) a.transitions -> mem f result }
    ensures  { forall r. (path_eps s r a) -> mem r result }
    ensures  { forall r. mem r result -> path_eps s r a }
    ensures  { is_empty a.transitions -> result = singleton s }
     
    
  (* for each state in s, computes its transition through sym *)
  let rec ghost function fold_delta (s: fset state) (sym: symbol) (a: automaton) : fset state
    (*requires { subset s a.states }*)
    variant  { cardinal s }
    ensures  { subset result a.states }
    ensures  { forall c. mem c result -> exists q. mem q s /\ mem (q, sym, c) a.transitions }
    ensures  { is_empty s -> is_empty result }
    ensures  { is_empty a.transitions -> is_empty result }
    ensures  { forall q, c. mem q s /\ mem (q, sym, c) a.transitions -> mem c result }
  =
    if Fset.is_empty s then Fset.empty
    else let st = pick s in
         let ds = delta st sym a in
         union ds (fold_delta (remove st s) sym a)
         
  lemma lemma_mon_fold_delta:
    forall s1 s2: fset state, sym: symbol, a:automaton.
      subset s1 a.states /\ subset s2 a.states /\ mem sym a.alphabet /\ subset s1 s2 -> subset (fold_delta s1 sym a) (fold_delta s2 sym a)
         
  let rec ghost function fold_eclose (s: fset state) (a: automaton) : fset state
    (*requires { subset s a.states }*)
    variant { cardinal s }
    ensures { subset result a.states }
    ensures { subset s result }
    ensures { forall q. mem q result -> mem q s \/ exists i. mem i result /\ mem (i, eps, q) a.transitions }
    ensures { forall i, q. mem i s /\ mem (i, eps, q) a.transitions -> mem q result }
    ensures { forall q, r. mem q s /\ (path_eps q r a) -> mem r result }
    ensures { forall r. mem r result -> exists q. mem q s /\ (path_eps q r a) }
    (*ensures  { (not exists q, c. mem q s /\ mem (q, eps, c) a.transitions) -> result = s }*) (* perceber se e util e/ou relevante *)
  =
    if Fset.is_empty s then Fset.empty
    else let q = pick s in
         union (eclose q a) (fold_eclose (remove q s) a) 
  
  
  lemma lemma_path_htap:
    forall x y: state, w: word, a:automaton.
      path x w y a <-> htap y (reverse w) x a 
  
  
  (* Extended Transition Function: returns the set of states reahable from state s through the word w. *)  
  let rec ghost function delta_ext (s: state) (w: word) (a: automaton) : fset state
    (*requires { mem s a.states }*)
    (*requires { forall x. LM.mem x w -> mem x (add eps a.alphabet) }*)
    variant  { Length.length w }
    ensures  { subset result a.states }
    ensures  { forall r. htap r w s a -> mem r result }
    ensures  { forall r. path s (reverse w) r a -> mem r result }  
    ensures  { forall r. mem r result -> htap r w s a }
    ensures  { forall r. mem r result -> path s (reverse w) r a }
  =
    match w with
    | Nil -> eclose s a
    | Cons x Nil -> if eq x eps then eclose s a
                    else let rs = eclose s a in
                         let qs = fold_delta rs x a in
                             fold_eclose qs a
    | Cons x xs ->  let rs = delta_ext s xs a in
                    let qs = fold_delta rs x a in
                        fold_eclose qs a
    end


  (* True if there is path from the start state of the automaton a to the given state s. *)
  predicate reachable (s: state) (a: automaton)
  =
    exists w. path a.start w s a
    
  (* True if a given state s can reach a final state of automaton a. *)  
  predicate productive (s: state) (a: automaton)
  =
    exists w, q. mem q a.finalStates /\ path s w q a
  
  (* True if a state is both reachable and productive. *)  
  predicate useful (s: state) (a: automaton)
  =
    reachable s a /\ productive s a

  (* States that if the start state of an automaton is productive and not final, than there is a transition from that state. *)
  lemma lemma_trans_from_start:
    forall a: automaton. productive a.start a /\ not (mem a.start a.finalStates) /\ cardinal a.transitions > 0 -> exists x, q. mem (a.start, x, q) a.transitions


  (* --- Compile automaton --- *)

  type gen_sym = {
    mutable r: int;
    ghost mutable dom: fset int
  }

  let c: gen_sym = { r = 0; dom = FS.empty }

  val next_val (g: gen_sym) : int
    writes  { g }
    ensures { not (mem result (old g).dom) }
    ensures { g.r = (old g).r + 1 }
    ensures { g.dom == add result (old g).dom }
  (* = g.r <- g.r + 1; g.dom <- add g.r g.dom; g.r *)
  
  
  val function sigma_ext (a: fset symbol) : fset word 
    ensures { forall w. mem w result -> w <> Nil }
    ensures { forall w. mem w result -> forall x. LM.mem x w -> mem x (add eps a) }
    ensures { forall w x. LM.mem x w /\ mem x (add eps a) /\ w <> Nil -> mem w result }
    
  (* True if word w leads the start state of the automaton a to a final state *)  
  let ghost predicate accepted_words (a: automaton) (w: word)
    (*requires { forall x. LM.mem x w -> mem x (add eps a.alphabet) }*) 
    ensures  { result <-> exists f. mem f a.finalStates /\ path a.start w f a }
  =
    let finals = BasicTypes.SS.to_fset a.finalStates in
    not (is_empty (inter (delta_ext a.start (reverse w) a) finals))
  
  (* Axiomatization of filter according to its defintion *)
  lemma axiom_filter:
    forall a:automaton. 
    let alphabet = BasicTypes.SA.to_fset a.alphabet in
    let s = (sigma_ext alphabet) in
    let p = (accepted_words a) in
    forall x. mem x (filter s p) <-> mem x s /\ p x
    
  (* Returns the language of an automaton a *)
  let ghost function automatonLang (a: automaton) : fset word
    (*requires { a.finalStates <> empty -> forall s. mem s a.states -> useful s a }*)
    (*requires { a.transitions <> empty -> a.finalStates <> empty }*)
    requires { forall f. mem f a.finalStates -> exists q, x. (*mem x (add eps a.alphabet) /\*) mem (q, x, f) a.transitions }
    (*requires { cardinal a.transitions = 1 -> cardinal a.finalStates <= 1 }*)
    
    ensures  { forall w. mem w result -> forall x. LM.mem x w -> mem x (add eps a.alphabet) }
    ensures  { forall w. mem w result -> mem w (sigma_ext a.alphabet) }
    ensures  { forall w. mem w result -> w <> Nil }
    
    ensures  { is_empty a.finalStates -> is_empty result }
    ensures  { result <> empty -> a.finalStates <> empty }
    (*ensures  { productive a.start a -> result <> empty }*)
    ensures  { (is_empty a.transitions /\ mem a.start a.finalStates) -> result = singleton (Cons eps Nil) }
    ensures  { (is_empty a.transitions /\ not mem a.start a.finalStates) -> result = empty }
    ensures  { mem a.start a.finalStates -> mem (Cons eps Nil) result }
    
    ensures  { forall w. mem w result -> ( inter (delta_ext a.start (reverse w) a) a.finalStates <> empty /\ mem w (sigma_ext a.alphabet) ) }
    ensures  { forall w. mem w result -> (a.finalStates <> empty /\ exists f. mem f a.finalStates /\ path a.start w f a /\ mem w (sigma_ext a.alphabet) ) }
    ensures  { forall w. (w <> Nil /\ mem w (sigma_ext a.alphabet) /\ inter (delta_ext a.start (reverse w) a) a.finalStates <> empty) -> mem w result }
    ensures  { forall w f. (w <> Nil /\ mem w (sigma_ext a.alphabet) /\ mem f a.finalStates /\ path a.start w f a) -> mem w result }
    ensures  { forall w. (w = Nil /\ inter (delta_ext a.start w a) a.finalStates <> empty) -> mem (Cons eps Nil) result }
    (*ensures  { productive a.start a -> result <> empty }*)
    
    (*ensures  { forall w. (w <> (Cons eps Nil) /\ mem w result) -> forall x. LM.mem x w -> exists q, r. mem (q, x, r) a.transitions }*)
    ensures  { forall x f. (*mem x (add eps a.alphabet) /\*) mem f a.finalStates /\ mem (a.start, x, f) a.transitions -> mem (Cons x Nil) result }
    ensures  { forall x f. (*mem x (add eps a.alphabet) /\*) mem f a.finalStates /\ a.transitions = singleton (a.start, x, f) /\ not mem a.start a.finalStates -> result = (singleton (Cons x Nil)) }
    
    ensures  { is_empty result \/ (exists w. mem w result /\ mem w (sigma_ext a.alphabet) /\ not is_empty (inter (delta_ext a.start (reverse w) a) a.finalStates)) }
    (*ensures  { forall w. mem w result -> mem w (automatonLangConstr a) }
    ensures  { forall w. mem w (automatonLangConstr a) -> mem w result }*)
  =
    let alphabet = BasicTypes.SA.to_fset a.alphabet in
      (*let p = fun w -> not is_empty (inter (delta_ext a.start w a) finals) in*)
      (*let res =*) filter (sigma_ext alphabet) (accepted_words a) (*in
        if mem Nil res then add (Cons eps Nil) (remove Nil res)
        else res*)
    
  (*lemma aux: forall s w a.
    mem w (sigma_ext a.alphabet) /\ mem s a.states ->
      match w with
      | Nil -> true
      | Cons x _ -> exists q. mem (s, x, q) a.transitions
      end*)

  (*lemma langLength1:
    forall a: automaton, f: state, sym: symbol.
      mem f a.finalStates /\ a.transitions = singleton (a.start, sym, f) ->
      automatonLang a = singleton (Cons sym Nil)*)
      
  (*lemma langContains:
    forall a: automaton, f: state, sym: symbol.
      mem f a.finalStates /\ mem sym a.alphabet /\ subset (singleton (a.start, sym, f)) (a.transitions) ->
      subset (singleton (Cons sym Nil)) (automatonLang a)*)
 
  let rec function add_eps_trans (finals: SS.set) (g_finals: SS.set) (s: state) (trans: ST.set) : ST.set
    requires { subset finals g_finals }
    requires { forall a, b, c. ST.mem (a,b,c) trans -> SS.mem a g_finals /\ b = eps /\ c = s }
    variant  { cardinal finals }
    ensures  { subset trans result }
    ensures  { SS.is_empty finals -> result = trans }
    ensures  { forall f. SS.mem f finals -> ST.mem (f, eps, s) result }
    ensures  { forall a, b, c. ST.mem (a,b,c) result -> SS.mem a g_finals /\ b = eps /\ c = s }
    ensures  { forall a, b, c. ST.mem (a,b,c) result /\ not SS.mem a g_finals -> SS.mem a finals /\ b = eps /\ c = s }
  =
    if SS.is_empty finals then trans
    else let f = SS.choose finals in
         let trans = ST.add (f, eps, s) trans in
         let finals = SS.remove f finals in
         add_eps_trans finals g_finals s trans
  
  let function automaton_concat (a: automaton) (b: automaton) : automaton
    ensures { result.states = union a.states b.states }
    ensures { result.alphabet = union a.alphabet b.alphabet }
    ensures { result.start = a.start }
    ensures { let a_to_b = add_eps_trans a.finalStates a.finalStates b.start (ST.mk empty) in result.transitions = union a_to_b (union a.transitions b.transitions) }
    ensures { result.finalStates = b.finalStates }
  =
    let a_to_b = add_eps_trans a.finalStates a.finalStates b.start (ST.empty ()) in
      { states = SS.union a.states b.states;
        alphabet = SA.union a.alphabet b.alphabet;
        start = a.start;
        transitions = ST.union a_to_b (ST.union a.transitions b.transitions);
        finalStates = b.finalStates }
  
  lemma lemma_word_concat:
    forall a b c: automaton, w: word.
      (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      c = automaton_concat a b /\
      mem w (sigma_ext c.alphabet) /\ inter (delta_ext a.start (reverse w) c) b.finalStates <> empty ->
        exists u v: word. mem u (sigma_ext a.alphabet) /\ mem v (sigma_ext b.alphabet) /\
          w = Append.(++) u v /\ inter (delta_ext a.start (reverse u) a) a.finalStates <> empty /\ inter (delta_ext b.start (reverse v) b) b.finalStates <> empty
  
  lemma lemma_alang_concat:
    forall a b c: automaton, w: word.
      let le = automatonLang a in let lf = automatonLang b in let lef = automatonLang c in
      (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      c = automaton_concat a b /\
      mem w lef -> exists u v. w = Append.(++) u v /\ mem u le /\ mem v lf
      
  lemma lemma_concat_word:
    forall a b c: automaton, u v w: word.
      (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      mem u (sigma_ext a.alphabet) /\ mem v (sigma_ext b.alphabet) /\  
        inter (delta_ext a.start (reverse u) a) a.finalStates <> empty /\ inter (delta_ext b.start (reverse v) b) b.finalStates <> empty /\
          w = Append.(++) u v /\ c = automaton_concat a b
            -> mem w (sigma_ext c.alphabet) /\ inter (delta_ext a.start (reverse w) c) b.finalStates <> empty
         
  lemma lemma_concat_alang:
    forall a b c: automaton, u v w: word.
      let le = automatonLang a in let lf = automatonLang b in let lef = automatonLang c in
      (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      mem u le /\ mem v lf /\ w = Append.(++) u v /\ c = automaton_concat a b -> mem w lef
      
  (*lemma lemma_teste:
    forall a b c: automaton, w: word. let c = automaton_concat a b in
      let le = automatonLang a in let lf = automatonLang b in let lef = automatonLang c in
      (a.transitions <> empty -> a.finalStates <> empty) /\ (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (b.transitions <> empty -> b.finalStates <> empty) /\ (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (c.transitions <> empty -> c.finalStates <> empty) /\ (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      mem w lef /\ mem w (concat le lf) -> lef = (concat 
      (*mem w lef -> exists w1 w2. w = Append.(++) w1 w2 /\ mem w1 le /\ mem w2 lf -> (lef = concat le lf)*)*)
      
  let function automaton_union (i: state) (a: automaton) (b: automaton) : automaton
    ensures { result.states = add i (union a.states b.states) }
    ensures { result.alphabet = union a.alphabet b.alphabet }
    ensures { result.start = i }
    ensures { let new_trans = add (i, eps, b.start) (singleton (i, eps, a.start)) in result.transitions = union new_trans (union a.transitions b.transitions) }
    ensures { result.finalStates = union a.finalStates b.finalStates }
  =
    let new_trans = ST.add (i, eps, b.start) (ST.singleton (i, eps, a.start)) in
      { states = SS.add i (SS.union a.states b.states);
        alphabet = SA.union a.alphabet b.alphabet;
        start = i;
        transitions = ST.union new_trans (ST.union a.transitions b.transitions);
        finalStates = SS.union a.finalStates b.finalStates }
        
  lemma lemma_word_union:
    forall a b c: automaton, w: word, i: state.
      (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      c = automaton_union i a b /\
      mem w (sigma_ext c.alphabet) /\ inter (delta_ext c.start (reverse w) c) c.finalStates <> empty ->
        (mem w (sigma_ext a.alphabet) /\ inter (delta_ext a.start (reverse w) a) a.finalStates <> empty) \/ 
          (mem w (sigma_ext b.alphabet) /\ inter (delta_ext b.start (reverse w) b) b.finalStates <> empty)
  
  lemma lemma_alang_union:
    forall a b c: automaton, w: word, i: state.
      let le = automatonLang a in let lf = automatonLang b in let lef = automatonLang c in
      (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      c = automaton_union i a b /\
      mem w lef -> mem w le \/ mem w lf 
      
  lemma lemma_union_word:
    forall a b c: automaton, w: word, i: state.
      (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      ((mem w (sigma_ext a.alphabet) /\ inter (delta_ext a.start (reverse w) a) a.finalStates <> empty) \/ 
        (mem w (sigma_ext b.alphabet) /\ inter (delta_ext b.start (reverse w) b) b.finalStates <> empty)) /\
          c = automaton_union i a b -> 
            mem w (sigma_ext c.alphabet) /\ inter (delta_ext c.start (reverse w) c) c.finalStates <> empty
         
  lemma lemma_union_alang:
    forall a b c: automaton, w: word, i: state.
      let le = automatonLang a in let lf = automatonLang b in let lef = automatonLang c in
      (forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions) /\
      (forall f. mem f b.finalStates -> exists q, w. mem (q, w, f) b.transitions) /\
      (forall f. mem f c.finalStates -> exists q, w. mem (q, w, f) c.transitions) /\
      (mem w le \/ mem w lf) /\ c = automaton_union i a b -> mem w lef
      
  
  (* Translates a given regular expression into an eps-NFA *)
  let rec compile (r: regex) : automaton
    requires { regex_wf r }
    (* + ensures, elo menos 1 para cada caso da traducao *)
    ensures { (r = Eps \/ forall a. r = Symb a \/ (forall e f. e <> Empty /\ f <> Empty /\ (r = Seq e f \/ r = Plus e f)) ) -> forall s. mem s result.states -> useful s result }
    ensures { (r = Eps \/ forall a. r = Symb a) -> cardinal result.finalStates = 1 }
    ensures { (r = Eps \/ forall a. r = Symb a) -> forall s. mem s result.states -> exists q, w. mem (s, w, q) result.transitions \/ mem (q, w, s) result.transitions }
    ensures { (r = Eps \/ forall a. r = Symb a \/ forall e f. r = Plus e f) -> exists w q. mem (result.start, w, q) result.transitions }
    (*ensures { cardinal result.transitions = 1 -> forall x, q. result.transitions = (add (result.start, x, q) empty) /\ mem q result.finalStates } *)
    ensures { forall f. mem f result.finalStates -> exists q, w. mem (q, w, f) result.transitions }
    ensures { regexLang r = automatonLang result }
  = match r with
    | Empty -> let i = next_val c in
        { states = SS.singleton i;
          alphabet = SA.empty ();
          start = i;
          transitions = ST.empty ();
          finalStates = SS.empty (); }
    | Eps -> let start = next_val c in
        let final = next_val c in
        let states = SS.singleton start in
        let states = SS.add final states in
        let a = { states = states;
          alphabet = SA.empty ();
          start = start;
          transitions = ST.singleton (start, eps, final);
          finalStates = SS.singleton final } in
        (*assert { exists q. mem (a.start, eps, q) a.transitions };*)
        (*assert { delta_ext r.start (Cons eps Nil) r = add r.start r.finalStates };*)
        a
    | Symb x -> let start = next_val c in
        let final = next_val c in
        let states = SS.singleton start in
        let states = SS.add final states in
        let a = { states = states;
          alphabet = SA.add x (SA.empty ()) ;
          start = start;
          transitions = ST.singleton (start, x, final);
          finalStates = SS.singleton final } in
        (*assert { exists q. mem (a.start, x, q) a.transitions };*)
        (*assert { delta_ext r.start (Cons a Nil) r = r.finalStates };*)
        a
    | Seq e f -> let a = compile e in let b = compile f in
        automaton_concat a b
    | Plus e f -> let i = next_val c in
        let a = compile e in let b = compile f in
        automaton_union i a b
  end
  
  
  lemma lemma_path_middle:
    forall x z: state, w: word, a: automaton.
      path x w z a -> exists u v y. w = (Append.(++) u v) /\ path x u y a /\ path y v z a
  
  lemma lemma_path_concat:
    forall x y z: state, u v: word, a: automaton.
      path x u y a /\ path y v z a -> path x (Append.(++) u v) z a
  
  lemma lemma_path_eps_concat:
    forall x y z: state, a: automaton.
      path_eps x y a /\ path_eps y z a -> path_eps x z a
      
  (* If q \in ECLOSE(s) and there is an eps-transiton from q to a state r, then r \in ECLOSE(s) *)
  lemma lemma_close_eclose:
    forall a:automaton, s q r:state.
      mem s a.states /\ mem q (eclose s a) /\ mem (q, eps, r) a.transitions -> mem r (eclose s a)
  
  (* If q in ECLOSE(s), then ECLOSE(q) must be a subset of ECLOSE(s). *)    
  lemma lemma_subset_eclose_df:
    forall a:automaton, s:state, q:state. let ecl = (eclose s a) in 
      mem s a.states /\ mem q ecl -> subset (eclose q a) ecl
  
end