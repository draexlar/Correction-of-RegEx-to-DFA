module BasicTypes

  use seq.Seq, list.List

  type char

  val eq (c1 c2: char) : bool
    ensures { result <-> c1 = c2 }

  val constant eps : char (* used for representing the empty transitions *)

  (* defining input symbols and alphabet *)
  type symbol = char

  clone import set.SetApp as SA with type elt = symbol

  (* defining word and language as a set *)
  type word = list symbol

  clone import set.SetApp as SL with type elt = word

  (* defining a state and a set of states *)
  type state = int

  clone import set.SetApp as SS with type elt = state

  (* defining a transition and a set of transitions *)
  type transition = (state , symbol , state)

  clone import set.SetApp as ST with type elt = transition

end


module RegEx

  use BasicTypes
  use list.List
  use set.Fset

  type regex =
      Empty
    | Eps
    | Symb symbol
    (*| Seq regex regex
    | Plus regex regex*)
    
  type regex_wf = {
    regex: regex
  } invariant { match regex with
                | Symb a -> a <> eps
                | _ -> true end }

  function regexLang (r: regex_wf) : fset word =
    match r.regex with
    | Empty -> empty
    | Eps -> add (Cons eps Nil) empty
    | Symb a -> add (Cons a Nil) empty
    (*| Seq e f -> let l = regexLang e in
                      SL.iter (fun w -> SL.add w l) Language.add (regexLang f)
    | Plus (e, f) -> Language.union (regexLang f) (regexLang e) <<r*)
   end

end

module RevListProp
  
  use list.List, list.HdTlNoOpt, list.Reverse
  
  lemma hd_tl_reverse:
    forall w xs:list 'a, x:'a. w = Cons x xs -> ( hd (reverse (reverse w)) = x /\ tl (reverse (reverse w)) = xs )
    
  lemma hd_tl_reverse2:
    forall w xs ys:list 'a, x y:'a. w = Cons x xs /\ reverse w = Cons y ys -> hd (reverse (Cons y ys)) = x
    
  lemma hd_tl_reverse3:
    forall w xs:list 'a, x:'a. w = Cons x xs /\ xs <> Nil -> hd (reverse w) = hd (reverse xs)
    
  lemma hd_tl_reverse4:
    forall w xs ys:list 'a, x y:'a. w = Cons x xs /\ xs <> Nil /\ reverse w = Cons y ys -> hd (reverse ys) = x
  
end


module NFA

  use BasicTypes, RegEx, ref.Ref, RevListProp
  use import list.Mem as LM
  use import list.Reverse as LR
  use list.List, list.Length, list.Append, list.HdTlNoOpt
  use int.Int
  use set.Fset
 
  val constant start_const: state

  type automaton = {
    states: SS.set;
    alphabet: SA.set;
    start: state;
    transitions: ST.set;
    finalStates: SS.set;
  } invariant { mem start states }
    invariant { not (is_empty states) }
    invariant { not mem eps alphabet }
    invariant { forall x. mem x alphabet -> exists a, c. mem (a,x,c) transitions }
    invariant { subset finalStates states }
    invariant { forall t: transition. mem t transitions ->
                  let (a,b,c) = t in mem a states /\ mem b (add eps alphabet) /\ mem c states }
    by { states = SS.singleton start_const; alphabet = SA.empty ();
         start = start_const; transitions = ST.empty (); finalStates = SS.empty () }

  (* --- Operations over finite automatons --- *)

  (* get starting state, symbol, and/or end state of all transitions in set  *)
  let rec ghost function delta_get_1st (t: fset transition) : fset state 
    variant { cardinal t }
    ensures { forall x. mem x result -> exists b c. mem (x, b, c) t }
    ensures { forall a, b, c. mem (a, b, c) t -> mem a result }
  =
    if is_empty t then empty
    else let elem = pick t in
         let (a,_,_) = elem in
           add a (delta_get_1st (remove elem t))
    

  let rec ghost function delta_get_2nd (t: fset transition) : fset symbol
    variant { cardinal t }
    ensures { forall x. mem x result -> exists a c. mem (a, x, c) t }
    ensures { forall a, b, c. mem (a, b, c) t -> mem b result }
  =
    if is_empty t then empty
    else let elem = pick t in
         let (_,b,_) = elem in
           add b (delta_get_2nd (remove elem t))

  let rec ghost function delta_get_3rd (t: fset transition) : fset state
    variant { cardinal t }
    ensures { forall x. mem x result -> exists a b. mem (a, b, x) t }
    ensures { forall a, b, c. mem (a, b, c) t -> mem c result }
  =
    if is_empty t then empty
    else let elem = pick t in
         let (_,_,c) = elem in
           add c (delta_get_3rd (remove elem t))
  
  
  let rec ghost function filter_trans (s: state) (sym: symbol) (t: fset transition) :
    fset transition
    (* requires { mem s a.states } *)
    (* provar subconjunto do que entrou *)
    variant { cardinal t }
    ensures { subset result t }
    ensures { forall a, b, c. mem (a, b, c) result -> b = sym /\ a = s }
    ensures { forall c. mem (s, sym, c) t -> mem (s, sym, c) result }
    ensures { (not exists c. mem (s, sym, c) t) -> is_empty result }
  =
    if is_empty t then empty
    else let elem = pick t in
      let (a,b,_) = elem in
      if s = a && eq b sym then
        add elem (filter_trans s sym (remove elem t))
      else filter_trans s sym (remove elem t)

  (* returns states reachable from s through sym *)
  let ghost function delta (s: state) (sym: symbol) (a: automaton) : fset state
    requires { mem s a.states }
    ensures  { subset result a.states }
    ensures  { forall c. mem (s, sym, c) a.transitions <-> mem c result }
    ensures  { (not exists c. mem (s, sym, c) a.transitions) -> is_empty result }
  =
    let t = BasicTypes.ST.to_fset a.transitions in
    let trans = filter_trans s sym t in
      delta_get_3rd trans

  (* obtains the next states computed through epsilon transitions from each state in s *)
  let rec ghost function fold_next_states (ss: fset state) (a: automaton) : fset state
    requires { subset ss a.states }
    variant  { cardinal ss }
    ensures  { subset result a.states }
    ensures  { subset ss result }
    ensures  { forall q. mem q result -> mem q ss \/ (exists i. mem i result /\ mem (i, eps, q) a.transitions) }
    ensures  { forall i, q. mem i ss /\ mem (i, eps, q) a.transitions -> mem q result }
    ensures  { (not exists q, c. mem q ss /\ mem (q, eps, c) a.transitions) -> result = ss }
  =
    if is_empty ss then empty
    else if ST.is_empty a.transitions then ss
    else let q = pick ss in
         (* let t = BasicTypes.ST.to_fset a.transitions in *)
         let nxt_sts = add q (delta q eps a) in
           union nxt_sts (fold_next_states (remove q ss) a)

  use int.Power
  
  (*lemma close:
    forall i, q, s, a. let result = fold_next_states s a in
      mem i result /\ mem (i, eps, q) a.transitions -> mem q result*)

  (* computes the eclose for each state in sts *)
  let rec ghost function eclose (ss: fset state) (a: automaton) : fset state
    requires { subset ss a.states }
    variant  { cardinal a.states - cardinal ss }
    ensures  { subset result a.states }
    ensures  { subset ss result }
    (*ensures  { forall x y. mem x s -> mem (x, eps, y) a.transitions -> mem y result }*)
    ensures  { forall q. mem q result -> mem q ss \/ (exists i. mem i result /\ mem (i, eps, q) a.transitions) }
    (*ensures  { forall q. mem q result -> subset (eclose (singleton q) a) result }*)
    (*ensures  { forall q. mem q result -> mem q ss \/ (exists i, w. mem i ss /\ (forall x. LM.mem x w -> x = eps) /\ path i w q a) }*)
    (*ensures  { forall q. mem q result -> mem q ss \/ (exists w, f. mem q ss /\ mem f result /\ (forall x. LM.mem x w -> x = eps) /\ path q w f a) }*)
    ensures  { forall i, q. mem i result /\ mem (i, eps, q) a.transitions -> mem q result }
    (*ensures  { forall r. mem r result /\ not mem r s -> exists i. mem i result /\ mem (i, eps, r) a.transitions }*)
    ensures  { is_empty a.transitions -> result = ss }
    ensures  { (not exists q, c. mem q ss /\ mem (q, eps, c) a.transitions) -> result = ss }
  =
    if ST.is_empty a.transitions then ss
    else let ns = fold_next_states ss a in
         if subset ns ss then ns 
         else eclose (union ss ns) a
         
  
  (*lemma lemma_reflexivity_eclose:
    forall a:automaton, ss:fset state. subset ss a.states -> subset ss (eclose ss a)*)

  (* for each state in s, computes its transition through sym *)
  let rec ghost function fold_delta (s: fset state) (sym: symbol) (a: automaton) : fset state
    requires { subset s a.states }
    variant  { cardinal s }
    ensures  { subset result a.states }
    ensures  { forall c. mem c result -> exists q. mem q s /\ mem (q, sym, c) a.transitions }
    ensures  { is_empty s -> is_empty result }
    ensures  { is_empty a.transitions -> is_empty result }
    ensures  { forall q, c. mem q s /\ mem (q, sym, c) a.transitions -> mem c result }
  =
    if is_empty s then empty
    else let st = pick s in
         let ds = delta st sym a in
         union ds (fold_delta (remove st s) sym a)
         
  predicate path (s: state) (w: word) (f: state) (a: automaton)
  =
    mem s a.states ->
    match w with
    | Nil -> s = f \/ mem f (eclose (add s empty) a)
    | Cons x Nil -> mem x (add eps a.alphabet) /\
                    if x = eps then (*path s Nil f a*) s = f \/ mem f (eclose (add s empty) a)
                    else mem (s, x, f) a.transitions \/ 
                        (exists q. mem q (eclose (add s empty) a) /\ mem (q, x, f) a.transitions) \/ 
                        (exists q, r. mem q (eclose (add s empty) a) /\ mem (q, x, r) a.transitions /\ mem f (eclose (add r empty) a))
    | Cons x xs -> xs <> Nil /\ mem x (add eps a.alphabet) /\
                   exists r. (*path s (Cons x Nil) r a*) 
                             (mem (s, x, r) a.transitions \/ (exists q. mem q (eclose (add s empty) a) /\ mem (q, x, r) a.transitions)) /\ 
                             path r xs f a
    end       
    
  
  lemma lemma_eclose_path:
    forall s:fset state, q:state, a:automaton. 
      subset s a.states /\ mem q (eclose s a) -> exists i:state, w:word. mem i s /\ (forall x. LM.mem x w -> x = eps) /\ path i w q a
      
  lemma lemma_path_eclose:
    forall s:fset state, q:state, f:state, a:automaton, w:word.
      subset s a.states /\ mem f a.states /\ mem q s /\ (forall x. LM.mem x w -> x = eps) /\ path q w f a -> mem f (eclose s a)
      
  (*lemma lemma_simple_subset_eclose:
    forall a:automaton, s:fset state, q:state, f:state. let ecl = (eclose s a) in 
      mem q ecl /\ mem f (eclose (singleton q) a) -> mem f ecl*)
  
  lemma lemma_concat_path:
    forall s q f:state, w1 w2:word, a:automaton.
      (mem s a.states /\ mem q a.states /\ mem f a.states /\ (forall x. LM.mem x w1 -> mem x (add eps a.alphabet)) 
        /\ (forall x. LM.mem x w2 -> mem x (add eps a.alphabet)) /\ path s w1 q a /\ path q w2 f a) -> path s (w1++w2) f a
         
  lemma lemma_subset_eclose:
    forall a:automaton, s:fset state, q:state. let ecl = (eclose s a) in 
      subset s a.states /\ mem q ecl -> subset (eclose (singleton q) a) ecl
    
    
  let rec ghost function delta_ext (s: state) (w: word) (a: automaton) :
    fset state
    requires { length w < 2 }
    requires { mem s a.states }
    requires { forall x. LM.mem x w -> mem x (add eps a.alphabet) }
    variant  { length w }
    ensures  { subset result a.states }
    ensures  { forall r. path s (reverse w) r a -> mem r result }
    
    (*ensures  { forall r. mem r result -> (s = r /\ not (path s w r a)) \/ path s w r a }*)
  =
      match w with
      | Nil -> eclose (add s empty) a
      | Cons x Nil -> if eq x eps then eclose (add s empty) a
                      else let rs = delta_ext s Nil a in
                           let qs = fold_delta rs x a in
                             eclose qs a
      | Cons x xs ->  let rs = delta_ext s xs a in
                      let qs = fold_delta rs x a in
                        eclose qs a
      end


  predicate reachable (s: state) (a: automaton)
  =
    exists w. path a.start w s a
    
  predicate productive (s: state) (a: automaton)
  =
    exists w, q. mem q a.finalStates /\ path s w q a
    
  predicate useful (s: state) (a: automaton)
  =
    reachable s a /\ productive s a


  lemma trans_from_start:
    forall a: automaton. productive a.start a /\ not (mem a.start a.finalStates) /\ cardinal a.transitions > 0 -> exists x, q. mem (a.start, x, q) a.transitions


  (* --- Compile automaton --- *)

  type gen_sym = {
    mutable r: int;
    ghost mutable dom: fset int
  }

  let c: gen_sym = { r = 0; dom = empty }

  val next_val (g: gen_sym) : int
    writes  { g }
    ensures { not (mem result (old g).dom) }
    ensures { g.r = (old g).r + 1 }
    ensures { g.dom == add result (old g).dom }
  (* = g.r <- g.r + 1; g.dom <- add g.r g.dom; g.r *)
  
  
  let ghost function sigma_ext (ss: fset symbol) : fset word 
    ensures { forall w. mem w result -> length w < 2 }
    ensures { forall w. mem w result -> forall x. LM.mem x w -> mem x (add eps ss) }
  =
    let ss = map (fun s -> Cons s Nil) ss in
    add (Cons eps Nil) ss
    
  (* constructive definition of the language of an automaton *)
  let ghost function automatonLangConstr (a: automaton) : fset word
    requires { cardinal a.transitions < 2 }
    requires { a.finalStates <> empty -> forall s. mem s a.states -> useful s a }
    requires { a.transitions <> empty -> a.finalStates <> empty }
    requires { forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions }
    (* ensures  { result <> empty <-> a.finalStates <> empty } ultimo caso não funciona *)
    ensures  { result <> empty -> a.finalStates <> empty }
    ensures  { (is_empty a.transitions /\ mem a.start a.finalStates) -> result = singleton (Cons eps Nil) }
    ensures  { (is_empty a.transitions /\ not mem a.start a.finalStates) -> result = empty }
    ensures  { forall w. (w <> (Cons eps Nil) /\ mem w result) -> forall x. LM.mem x w -> exists q, r. mem (q, x, r) a.transitions }
    (* ensures  { mem (Cons eps Nil) result -> mem a.start a.finalStates \/ *)
    ensures  { forall x. a.transitions = singleton (a.start, x, pick a.finalStates) /\ not mem a.start a.finalStates -> result = (singleton (Cons x Nil)) }
    (* ensures  { forall w. mem w result -> exists x, v, q, r. w = Cons x v /\ mem (q, x, r) a.transitions } *)
    (* ensures  { forall w. mem w result -> forall x. LM.mem x w -> mem x (add eps a.alphabet) } *)
    ensures  { mem a.start a.finalStates -> mem (Cons eps Nil) result }
    ensures  { forall w. mem w result -> ( a.finalStates <> empty /\ path a.start w (pick a.finalStates) a /\ w <> Nil /\ (forall x. LM.mem x w -> mem x (add eps a.alphabet)) ) }
    ensures  { forall w. mem w result -> ( inter (delta_ext a.start w a) a.finalStates <> empty /\ mem w (sigma_ext a.alphabet) ) }
    ensures  { forall w. mem w result -> length w < 2 }
    ensures  { forall w. mem w result -> mem w (sigma_ext a.alphabet) }
    ensures  { forall w. (w <> Nil /\ mem w (sigma_ext a.alphabet) /\ inter (delta_ext a.start w a) a.finalStates <> empty) -> mem w result }
    ensures  { forall w. (w = Nil /\ inter (delta_ext a.start w a) a.finalStates <> empty) -> mem (Cons eps Nil) result }
  =
    let t = BasicTypes.ST.to_fset a.transitions in
    let finals = BasicTypes.SS.to_fset a.finalStates in
    let emp: fset word = BasicTypes.SL.to_fset (BasicTypes.SL.empty ()) in
    
    if is_empty finals then emp
    else
      let tail = 
        if mem a.start finals then singleton (Cons eps Nil)
        else empty
      in 
        if is_empty t then tail
        else 
          if cardinal t = 1 then
            let (s, x, q) = pick t in
              if s = a.start && mem q finals then add (Cons x Nil) tail
              else tail
          else tail
  
    
  predicate accepted_words (a: automaton) (w: word) =
    let finals = BasicTypes.SS.to_fset a.finalStates in
    length w < 2 -> (inter (delta_ext a.start w a) finals) <> empty
  
  lemma axiom_filter:
    forall a:automaton. 
    let alphabet = BasicTypes.SA.to_fset a.alphabet in
    let s = (sigma_ext alphabet) in
    let p = (accepted_words a) in
    forall x. mem x (filter s p) <-> mem x s /\ p x
  
  let ghost automatonLang (a: automaton) : fset word
    requires { cardinal a.transitions < 2 }
    requires { a.finalStates <> empty -> forall s. mem s a.states -> useful s a }
    requires { a.transitions <> empty -> a.finalStates <> empty }
    requires { forall f. mem f a.finalStates -> exists q, w. mem (q, w, f) a.transitions }
    ensures  { forall w. mem w result -> forall x. LM.mem x w -> mem x (add eps a.alphabet) } 
    ensures  { forall w. mem w result -> mem w (automatonLangConstr a) }
    ensures  { forall w. mem w (automatonLangConstr a) -> mem w result }
  =
    let alphabet = BasicTypes.SA.to_fset a.alphabet in
      (*let p = fun w -> not is_empty (inter (delta_ext a.start w a) finals) in*)
      let res = filter (sigma_ext alphabet) (accepted_words a) in
        if mem Nil res then add (Cons eps Nil) (remove Nil res)
        else res
    
  (*lemma aux: forall s w a.
    mem w (sigma_ext a.alphabet) /\ mem s a.states ->
      match w with
      | Nil -> true
      | Cons x _ -> exists q. mem (s, x, q) a.transitions
      end*)

  (*lemma langLength1:
    forall a: automaton, f: state, sym: symbol.
      mem f a.finalStates /\ a.transitions = singleton (a.start, sym, f) ->
      automatonLang a = singleton (Cons sym Nil)*)
      
  (*lemma langContains:
    forall a: automaton, f: state, sym: symbol.
      mem f a.finalStates /\ mem sym a.alphabet /\ subset (singleton (a.start, sym, f)) (a.transitions) ->
      subset (singleton (Cons sym Nil)) (automatonLang a)*)

  let compile (r: regex_wf) : automaton
    (* + ensures, elo menos 1 para cada caso da traducao *)
    ensures { cardinal result.transitions < 2 }
    ensures { result.finalStates <> empty -> forall s. mem s result.states -> useful s result }
    ensures { cardinal result.transitions = 1 -> cardinal result.finalStates = 1 }
    ensures { cardinal result.transitions > 0 -> forall s. mem s result.states -> exists q, w. mem (s, w, q) result.transitions \/ mem (q, w, s) result.transitions }
    ensures { cardinal result.transitions > 0 -> exists w q. mem (result.start, w, q) result.transitions }
    (*ensures { cardinal result.transitions = 1 -> forall x, q. result.transitions = (add (result.start, x, q) empty) /\ mem q result.finalStates } *)
    ensures { result.transitions <> empty -> result.finalStates <> empty }
    ensures { forall f. mem f result.finalStates -> exists q, w. mem (q, w, f) result.transitions }
    ensures { regexLang r = automatonLangConstr result }
  = match r.regex with
    | Empty -> let i = next_val c in
        { states = SS.add i (SS.empty ());
          alphabet = SA.empty ();
          start = i;
          transitions = ST.empty ();
          finalStates = SS.empty (); }
    | Eps -> let start = next_val c in
        let final = next_val c in
        let states = SS.add start (SS.empty ()) in
        let states = SS.add final states in
        let a = { states = states;
          alphabet = SA.empty ();
          start = start;
          transitions = ST.add (start, eps, final) (ST.empty ());
          finalStates = SS.add final (SS.empty ()) } in
        (*assert { exists q. mem (a.start, eps, q) a.transitions };*)
        (*assert { delta_ext r.start (Cons eps Nil) r = add r.start r.finalStates };*)
        a
    | Symb x -> let start = next_val c in
        let final = next_val c in
        let states = SS.add start (SS.empty ()) in
        let states = SS.add final states in
        let a = { states = states;
          alphabet = SA.add x (SA.empty ()) ;
          start = start;
          transitions = ST.add (start, x, final) (ST.empty ());
          finalStates = SS.add final (SS.empty ()) } in
        (*assert { exists q. mem (a.start, x, q) a.transitions };*)
        (*assert { delta_ext r.start (Cons a Nil) r = r.finalStates };*)
        a
  end
  
  
  (* não consegue provar terminacao 
  predicate wf_visited (v: fset state) (s: state) (a: automaton)
  =
    subset v a.states /\ mem s a.states /\ not mem s v ->
      forall q:state. mem q v -> ( mem (q, eps, s) a.transitions \/ wf_visited (remove q v) q a )*)
      
  (*predicate pathV int int (list state) automaton
  
  axiom def_pathV: forall i j: int, v: list state, a: automaton. 
    pathV i j v a <->
      ( subset (elements v) a.states /\ 0 <= i < j < length v ->
        ( j = i+1 /\ mem ((nth j v), eps, (nth i v)) a.transitions ) \/ 
          ( mem ((nth (i+1) v), eps, (nth i v)) a.transitions /\ pathV (i+1) j v a ) )*)
      
  (*let rec ghost function wf_visited (v: list state) (s: state) (a: automaton) : bool
    requires { subset (elements v) a.states /\ mem s a.states }
    variant  { length v }
    ensures  { result = true -> ( forall i j. 0 <= i < j < length v -> pathV i j v a ) }
  =
    let t = BasicTypes.ST.to_fset a.transitions in
    match v with
    | Nil -> true
    | Cons q tl -> mem (q, eps, s) t && wf_visited tl q a
    end
    
    if is_empty v then true
    else let t = BasicTypes.ST.to_fset a.transitions in
         let q = pick v in
           ( mem (q, eps, s) t || wf_visited (remove q v) s a ) && wf_visited (remove q v) q a *)
  
  use seq.Seq
  use seq.ToFset
           
  let rec ghost predicate wf_visited (v: seq state) (s: state) (a: automaton)
    requires { subset (to_set v) a.states /\ mem s a.states }
    variant  { length v }
  =
     let t = BasicTypes.ST.to_fset a.transitions in
     if v == empty then true
     else let q = v[length v-1] in mem (q, eps, s) t && wf_visited v[..length v-1] q a
   
  (* lemma lemma_path_visited:
    forall v:list state, s:state, a:automaton, i j:int.
      mem s a.states /\ subset (elements v) a.states /\ wf_visited v s a /\ 0 <= i < j < length v -> pathV i j v a *) 
           
  lemma lemma_subset_wf_visited:
    forall a:automaton, s q:state, v:seq state.
      mem s a.states /\ mem q a.states /\ subset (to_set v) a.states /\ 
        mem (q, eps, s) a.transitions /\ wf_visited v q a -> wf_visited (snoc v q) s a
        
  let rec ghost predicate path_on_seq (v: seq state) (a: automaton)
    requires { subset (to_set v) a.states }
    variant  { length v }
    ensures  { forall i. result /\ length v > 1 /\ 0 <= i /\ i+1 < length v -> mem (v[i], eps, v[i+1]) a.transitions }
    ensures  { forall i. length v > 1 /\ 0 <= i /\ i+1 < length v /\ mem (v[i], eps, v[i+1]) a.transitions -> result }
  =
    let t = BasicTypes.ST.to_fset a.transitions in
    if v == empty then true
    else if length v = 1 then true
    else let s = v[0] in 
         let q = v[1] in 
         mem (s, eps, q) t && path_on_seq v[1..] a
         
  lemma lemma_sub_path_seq:
    forall a:automaton, q:state, v:seq state.
      mem q a.states /\ subset (to_set v) a.states /\ length v > 0 /\
        mem (v[length v - 1], eps, q) a.transitions /\ path_on_seq v a -> path_on_seq (snoc v q) a
  
  use import seq.Mem as SM
  use import set.Fset as FS
  
  let rec ghost function eclose_n (visited: seq state) (q: state) (a: automaton) : fset state
    requires { mem q a.states } 
    requires { subset (to_set visited) a.states }
    requires { wf_visited visited q a }
    requires { path_on_seq visited a }
    variant  { cardinal a.states - length visited }
    ensures  { subset result a.states }
    ensures  { mem q result }
    ensures  { subset (to_set visited) result }
    ensures  { forall f. mem f result -> SM.mem f visited \/ f = q \/ (not SM.mem f visited /\ (exists i. mem i result /\ mem (i, eps, f) a.transitions)) }
    ensures  { forall f. (not SM.mem q visited /\ mem (q, eps, f) a.transitions) -> mem f result }
    ensures  { forall f. f <> q /\ mem f result -> exists s. mem (s, eps, f) a.transitions }
    (*ensures  { forall i, f. (not mem q visited /\ mem (q, eps, i) a.transitions /\ mem i result /\ mem (i, eps, f) a.transitions) -> mem f result }*)
    (*ensures  { (not exists f, c. mem f ss /\ mem (f, eps, c) a.transitions) -> result = visited }*)
    =
      if not SM.mem q visited then 
         begin
           let ns = (delta q eps a) in
           fold_eclose (snoc visited q) ns a
         end
      else to_set visited
  with ghost function fold_eclose (visited: seq state) (ns: fset state) (a: automaton) : fset state 
    requires { subset ns a.states }
    requires { subset (to_set visited) a.states }
    requires { forall s. mem s ns -> wf_visited visited s a }
    requires { path_on_seq visited a }
    variant  { cardinal ns }
    ensures  { subset result a.states }
    ensures  { subset ns result }
    ensures  { subset (to_set visited) result }
    ensures  { forall f. mem f result -> SM.mem f visited \/ mem f ns \/ (exists i. mem i result /\ mem (i, eps, f) a.transitions) }
    ensures  { forall i, f. (not SM.mem i visited /\ mem i ns /\ mem (i, eps, f) a.transitions) -> mem f result } (* not mem i visited *)
    (*ensures  { (not exists f, c. mem f ss /\ mem (f, eps, c) a.transitions) -> result = ns }*)
  =
    if is_empty ns then to_set visited
    else let q = pick ns in
         union (eclose_n visited q a) (fold_eclose visited (remove q ns) a)
         
  (*lemma lemma_filter_eclose_n:
    forall a:automaton, s:state, v:fset state.
      mem s a.states /\ subset v a.states /\ not mem s v  -> subset (eclose_n empty s a) (eclose_n v s a)
               
  lemma lemma_subset_eclose_n:
    forall a:automaton, s q:state, v1 v2:fset state. let ecl = (eclose_n v1 s a) in 
      mem s a.states /\ subset v1 a.states /\ subset v2 a.states /\ subset v1 v2 /\ not mem s v1 /\ not mem q v1 /\ not mem q v2 /\ mem q ecl 
        -> subset (eclose_n v2 q a) ecl*)
        
  lemma lemma_sub_eclose_n:
    forall a: automaton, s x:state, v:seq state.
      mem s a.states /\ subset (to_set v) a.states /\ not SM.mem s v /\ (wf_visited v s a) /\
        mem x (eclose_n Seq.empty s a) -> mem x (eclose_n v s a)
  
  let ghost function eclose_df (s: state) (a: automaton) : fset state 
    requires { mem s a.states }
    ensures  { subset result a.states }
    ensures  { mem s result }
    ensures  { forall f. mem f result -> f = s \/ (exists i. mem i result /\ mem (i, eps, f) a.transitions) }
    ensures  { forall i, f. mem i result /\ mem (i, eps, f) a.transitions -> mem f result }
    ensures  { is_empty a.transitions -> result = singleton s }
    (*ensures  { forall q. mem q result -> subset (eclose_n empty q) result }*)
  =
    if ST.is_empty a.transitions then Fset.singleton s
    else eclose_n Seq.empty s a
    
  lemma lemma_close_eclose:
    forall a:automaton, s q r:state.
      mem s a.states /\ mem q (eclose_df s a) /\ mem (q, eps, r) a.transitions -> mem r (eclose_df s a)
      
  lemma lemma_subset_eclose_df:
    forall a:automaton, s:state, q:state. let ecl = (eclose_df s a) in 
      mem s a.states /\ mem q ecl -> subset (eclose_df q a) ecl

end